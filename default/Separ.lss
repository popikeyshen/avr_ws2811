
Separ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002848  000028dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  0080011a  0080011a  000028f6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003049  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000494  00000000  00000000  00003209  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002de9  00000000  00000000  0000369d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013ed  00000000  00000000  00006486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002429  00000000  00000000  00007873  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  00009c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070b  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000a6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000069d  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000b9b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e4       	ldi	r30, 0x48	; 72
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 31       	cpi	r26, 0x1C	; 28
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 af 07 	call	0xf5e	; 0xf5e <main>
      9e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitPins>:
volatile unsigned char LedSysEnable = DISABLE;
volatile unsigned int SoftTimer	 	= 0;

/**********************************************************************************/
void InitPins(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<PD6);//на вход
      ae:	8a e2       	ldi	r24, 0x2A	; 42
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2a e2       	ldi	r18, 0x2A	; 42
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	2f 7b       	andi	r18, 0xBF	; 191
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	DDRD &= ~(1<<PD7);//на вход
      c0:	8a e2       	ldi	r24, 0x2A	; 42
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a e2       	ldi	r18, 0x2A	; 42
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	2f 77       	andi	r18, 0x7F	; 127
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
}
      d2:	cf 91       	pop	r28
      d4:	df 91       	pop	r29
      d6:	08 95       	ret

000000d8 <InitUSART>:
/**********************************************************************************/
void InitUSART(void)
{
      d8:	df 93       	push	r29
      da:	cf 93       	push	r28
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
      e0:	81 ec       	ldi	r24, 0xC1	; 193
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	21 ec       	ldi	r18, 0xC1	; 193
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	28 69       	ori	r18, 0x98	; 152
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);	
      f2:	82 ec       	ldi	r24, 0xC2	; 194
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	22 ec       	ldi	r18, 0xC2	; 194
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	26 60       	ori	r18, 0x06	; 6
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
	UBRR0L = 0x67;
     104:	84 ec       	ldi	r24, 0xC4	; 196
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	27 e6       	ldi	r18, 0x67	; 103
     10a:	fc 01       	movw	r30, r24
     10c:	20 83       	st	Z, r18
	UBRR0H = 0x00;
     10e:	85 ec       	ldi	r24, 0xC5	; 197
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	10 82       	st	Z, r1
}
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	08 95       	ret

0000011c <CheckCRC>:
/**********************************************************************************/

unsigned char CheckCRC(void)//проверяем КС
{
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	0f 92       	push	r0
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
	unsigned char CountByte;

	for(CountByte = 0; CountByte <= (BufferForUART[SIZE] + 4); CountByte++)
     126:	19 82       	std	Y+1, r1	; 0x01
     128:	1e c0       	rjmp	.+60     	; 0x166 <CheckCRC+0x4a>
	{
		BufferForUART[CRC8 + (BufferForUART[SIZE])] -= BufferForUART[CountByte];
     12a:	20 91 84 01 	lds	r18, 0x0184
     12e:	82 2f       	mov	r24, r18
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	04 96       	adiw	r24, 0x04	; 4
     134:	22 2f       	mov	r18, r18
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	2c 5f       	subi	r18, 0xFC	; 252
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	2e 57       	subi	r18, 0x7E	; 126
     13e:	3e 4f       	sbci	r19, 0xFE	; 254
     140:	f9 01       	movw	r30, r18
     142:	40 81       	ld	r20, Z
     144:	29 81       	ldd	r18, Y+1	; 0x01
     146:	22 2f       	mov	r18, r18
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	2e 57       	subi	r18, 0x7E	; 126
     14c:	3e 4f       	sbci	r19, 0xFE	; 254
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	f4 2f       	mov	r31, r20
     154:	f2 1b       	sub	r31, r18
     156:	2f 2f       	mov	r18, r31
     158:	8e 57       	subi	r24, 0x7E	; 126
     15a:	9e 4f       	sbci	r25, 0xFE	; 254
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18

unsigned char CheckCRC(void)//проверяем КС
{
	unsigned char CountByte;

	for(CountByte = 0; CountByte <= (BufferForUART[SIZE] + 4); CountByte++)
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	80 91 84 01 	lds	r24, 0x0184
     170:	88 2f       	mov	r24, r24
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	04 96       	adiw	r24, 0x04	; 4
     176:	82 17       	cp	r24, r18
     178:	93 07       	cpc	r25, r19
     17a:	bc f6       	brge	.-82     	; 0x12a <CheckCRC+0xe>
	{
		BufferForUART[CRC8 + (BufferForUART[SIZE])] -= BufferForUART[CountByte];
	}
	return BufferForUART[CRC8 + (BufferForUART[SIZE])];
     17c:	80 91 84 01 	lds	r24, 0x0184
     180:	88 2f       	mov	r24, r24
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	04 96       	adiw	r24, 0x04	; 4
     186:	8e 57       	subi	r24, 0x7E	; 126
     188:	9e 4f       	sbci	r25, 0xFE	; 254
     18a:	fc 01       	movw	r30, r24
     18c:	80 81       	ld	r24, Z
}
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <CountCRC>:
/**********************************************************************************/
unsigned char CountCRC(unsigned char *pBufferCRC, unsigned char size)//считаем КС
{
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	00 d0       	rcall	.+0      	; 0x19c <CountCRC+0x6>
     19c:	00 d0       	rcall	.+0      	; 0x19e <CountCRC+0x8>
     19e:	0f 92       	push	r0
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	9c 83       	std	Y+4, r25	; 0x04
     1a6:	8b 83       	std	Y+3, r24	; 0x03
     1a8:	6d 83       	std	Y+5, r22	; 0x05
	unsigned char i;
	unsigned char Result = 0;
     1aa:	1a 82       	std	Y+2, r1	; 0x02
	
	for(i = 0; i <= (size - 1); i++)
     1ac:	19 82       	std	Y+1, r1	; 0x01
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <CountCRC+0x38>
	{
		Result += pBufferCRC[i];
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	2b 81       	ldd	r18, Y+3	; 0x03
     1b8:	3c 81       	ldd	r19, Y+4	; 0x04
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	fc 01       	movw	r30, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	89 0f       	add	r24, r25
     1c6:	8a 83       	std	Y+2, r24	; 0x02
unsigned char CountCRC(unsigned char *pBufferCRC, unsigned char size)//считаем КС
{
	unsigned char i;
	unsigned char Result = 0;
	
	for(i = 0; i <= (size - 1); i++)
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	28 2f       	mov	r18, r24
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	82 17       	cp	r24, r18
     1de:	93 07       	cpc	r25, r19
     1e0:	3c f7       	brge	.-50     	; 0x1b0 <CountCRC+0x1a>
	{
		Result += pBufferCRC[i];
	}
	return Result;
     1e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	cf 91       	pop	r28
     1f0:	df 91       	pop	r29
     1f2:	08 95       	ret

000001f4 <rgb_leds_init>:

int RGB=1;

////////////////////////////////////// RGB INIT //////////////////////////////
void rgb_leds_init()
{
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	64 97       	sbiw	r28, 0x14	; 20
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
	uint8_t j = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t k = 1;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	8a 83       	std	Y+2, r24	; 0x02

	DDRB|=_BV(ws2812_pin);
     214:	84 e2       	ldi	r24, 0x24	; 36
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	24 e2       	ldi	r18, 0x24	; 36
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f9 01       	movw	r30, r18
     21e:	20 81       	ld	r18, Z
     220:	21 60       	ori	r18, 0x01	; 1
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
		
    uint8_t i;
    for(i=MAXPIX; i>0; i--)
     226:	8e e1       	ldi	r24, 0x1E	; 30
     228:	8b 83       	std	Y+3, r24	; 0x03
     22a:	30 c0       	rjmp	.+96     	; 0x28c <rgb_leds_init+0x98>
    {    
        led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9c 01       	movw	r18, r24
     234:	21 50       	subi	r18, 0x01	; 1
     236:	30 40       	sbci	r19, 0x00	; 0
     238:	c9 01       	movw	r24, r18
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19
     242:	8d 55       	subi	r24, 0x5D	; 93
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	10 82       	st	Z, r1
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9c 01       	movw	r18, r24
     252:	21 50       	subi	r18, 0x01	; 1
     254:	30 40       	sbci	r19, 0x00	; 0
     256:	c9 01       	movw	r24, r18
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	82 0f       	add	r24, r18
     25e:	93 1f       	adc	r25, r19
     260:	8e 55       	subi	r24, 0x5E	; 94
     262:	9e 4f       	sbci	r25, 0xFE	; 254
     264:	fc 01       	movw	r30, r24
     266:	10 82       	st	Z, r1
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	9c 01       	movw	r18, r24
     270:	21 50       	subi	r18, 0x01	; 1
     272:	30 40       	sbci	r19, 0x00	; 0
     274:	c9 01       	movw	r24, r18
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	82 0f       	add	r24, r18
     27c:	93 1f       	adc	r25, r19
     27e:	8c 55       	subi	r24, 0x5C	; 92
     280:	9e 4f       	sbci	r25, 0xFE	; 254
     282:	fc 01       	movw	r30, r24
     284:	10 82       	st	Z, r1
	uint8_t k = 1;

	DDRB|=_BV(ws2812_pin);
		
    uint8_t i;
    for(i=MAXPIX; i>0; i--)
     286:	8b 81       	ldd	r24, Y+3	; 0x03
     288:	81 50       	subi	r24, 0x01	; 1
     28a:	8b 83       	std	Y+3, r24	; 0x03
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	88 23       	and	r24, r24
     290:	69 f6       	brne	.-102    	; 0x22c <rgb_leds_init+0x38>
    {    
        led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
    }
		int del=10;
     292:	8a e0       	ldi	r24, 0x0A	; 10
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	9e 83       	std	Y+6, r25	; 0x06
     298:	8d 83       	std	Y+5, r24	; 0x05

     //Rainbowcolors
    colors[0].r=150/del; colors[0].g=150/del; colors[0].b=150/del;
     29a:	86 e9       	ldi	r24, 0x96	; 150
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	2d 81       	ldd	r18, Y+5	; 0x05
     2a0:	3e 81       	ldd	r19, Y+6	; 0x06
     2a2:	b9 01       	movw	r22, r18
     2a4:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     2a8:	9b 01       	movw	r18, r22
     2aa:	c9 01       	movw	r24, r18
     2ac:	80 93 6b 01 	sts	0x016B, r24
     2b0:	86 e9       	ldi	r24, 0x96	; 150
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	2d 81       	ldd	r18, Y+5	; 0x05
     2b6:	3e 81       	ldd	r19, Y+6	; 0x06
     2b8:	b9 01       	movw	r22, r18
     2ba:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     2be:	9b 01       	movw	r18, r22
     2c0:	c9 01       	movw	r24, r18
     2c2:	80 93 6a 01 	sts	0x016A, r24
     2c6:	86 e9       	ldi	r24, 0x96	; 150
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2d 81       	ldd	r18, Y+5	; 0x05
     2cc:	3e 81       	ldd	r19, Y+6	; 0x06
     2ce:	b9 01       	movw	r22, r18
     2d0:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     2d4:	9b 01       	movw	r18, r22
     2d6:	c9 01       	movw	r24, r18
     2d8:	80 93 6c 01 	sts	0x016C, r24
    colors[1].r=255/del; colors[1].g=000; colors[1].b=000;           //red
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2d 81       	ldd	r18, Y+5	; 0x05
     2e2:	3e 81       	ldd	r19, Y+6	; 0x06
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     2ea:	9b 01       	movw	r18, r22
     2ec:	c9 01       	movw	r24, r18
     2ee:	80 93 6e 01 	sts	0x016E, r24
     2f2:	10 92 6d 01 	sts	0x016D, r1
     2f6:	10 92 6f 01 	sts	0x016F, r1
    colors[2].r=255/del; colors[2].g=100/del; colors[2].b=000;       //orange
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2d 81       	ldd	r18, Y+5	; 0x05
     300:	3e 81       	ldd	r19, Y+6	; 0x06
     302:	b9 01       	movw	r22, r18
     304:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     308:	9b 01       	movw	r18, r22
     30a:	c9 01       	movw	r24, r18
     30c:	80 93 71 01 	sts	0x0171, r24
     310:	84 e6       	ldi	r24, 0x64	; 100
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2d 81       	ldd	r18, Y+5	; 0x05
     316:	3e 81       	ldd	r19, Y+6	; 0x06
     318:	b9 01       	movw	r22, r18
     31a:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     31e:	9b 01       	movw	r18, r22
     320:	c9 01       	movw	r24, r18
     322:	80 93 70 01 	sts	0x0170, r24
     326:	10 92 72 01 	sts	0x0172, r1
    colors[3].r=100/del; colors[3].g=255/del; colors[3].b=000;       //yellow
     32a:	84 e6       	ldi	r24, 0x64	; 100
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	2d 81       	ldd	r18, Y+5	; 0x05
     330:	3e 81       	ldd	r19, Y+6	; 0x06
     332:	b9 01       	movw	r22, r18
     334:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     338:	9b 01       	movw	r18, r22
     33a:	c9 01       	movw	r24, r18
     33c:	80 93 74 01 	sts	0x0174, r24
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2d 81       	ldd	r18, Y+5	; 0x05
     346:	3e 81       	ldd	r19, Y+6	; 0x06
     348:	b9 01       	movw	r22, r18
     34a:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     34e:	9b 01       	movw	r18, r22
     350:	c9 01       	movw	r24, r18
     352:	80 93 73 01 	sts	0x0173, r24
     356:	10 92 75 01 	sts	0x0175, r1
    colors[4].r=000; colors[4].g=255/del; colors[4].b=000;           //green
     35a:	10 92 77 01 	sts	0x0177, r1
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	2d 81       	ldd	r18, Y+5	; 0x05
     364:	3e 81       	ldd	r19, Y+6	; 0x06
     366:	b9 01       	movw	r22, r18
     368:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     36c:	9b 01       	movw	r18, r22
     36e:	c9 01       	movw	r24, r18
     370:	80 93 76 01 	sts	0x0176, r24
     374:	10 92 78 01 	sts	0x0178, r1
    colors[5].r=000; colors[5].g=100/del; colors[5].b=255/del;       //light blue (tьrkis)
     378:	10 92 7a 01 	sts	0x017A, r1
     37c:	84 e6       	ldi	r24, 0x64	; 100
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2d 81       	ldd	r18, Y+5	; 0x05
     382:	3e 81       	ldd	r19, Y+6	; 0x06
     384:	b9 01       	movw	r22, r18
     386:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     38a:	9b 01       	movw	r18, r22
     38c:	c9 01       	movw	r24, r18
     38e:	80 93 79 01 	sts	0x0179, r24
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2d 81       	ldd	r18, Y+5	; 0x05
     398:	3e 81       	ldd	r19, Y+6	; 0x06
     39a:	b9 01       	movw	r22, r18
     39c:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     3a0:	9b 01       	movw	r18, r22
     3a2:	c9 01       	movw	r24, r18
     3a4:	80 93 7b 01 	sts	0x017B, r24
    colors[6].r=000; colors[6].g=000; colors[6].b=255/del;           //blue
     3a8:	10 92 7d 01 	sts	0x017D, r1
     3ac:	10 92 7c 01 	sts	0x017C, r1
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	2d 81       	ldd	r18, Y+5	; 0x05
     3b6:	3e 81       	ldd	r19, Y+6	; 0x06
     3b8:	b9 01       	movw	r22, r18
     3ba:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     3be:	9b 01       	movw	r18, r22
     3c0:	c9 01       	movw	r24, r18
     3c2:	80 93 7e 01 	sts	0x017E, r24
    colors[7].r=100/del; colors[7].g=000; colors[7].b=255/del;       //violet
     3c6:	84 e6       	ldi	r24, 0x64	; 100
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	2d 81       	ldd	r18, Y+5	; 0x05
     3cc:	3e 81       	ldd	r19, Y+6	; 0x06
     3ce:	b9 01       	movw	r22, r18
     3d0:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     3d4:	9b 01       	movw	r18, r22
     3d6:	c9 01       	movw	r24, r18
     3d8:	80 93 80 01 	sts	0x0180, r24
     3dc:	10 92 7f 01 	sts	0x017F, r1
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	2d 81       	ldd	r18, Y+5	; 0x05
     3e6:	3e 81       	ldd	r19, Y+6	; 0x06
     3e8:	b9 01       	movw	r22, r18
     3ea:	0e 94 c4 13 	call	0x2788	; 0x2788 <__divmodhi4>
     3ee:	9b 01       	movw	r18, r22
     3f0:	c9 01       	movw	r24, r18
     3f2:	80 93 81 01 	sts	0x0181, r24
    
	while(1)
    {
        //shift all vallues by one led
        uint8_t i=0;           
     3f6:	1c 82       	std	Y+4, r1	; 0x04
        for(i=MAXPIX; i>1; i--) 
     3f8:	8e e1       	ldi	r24, 0x1E	; 30
     3fa:	8c 83       	std	Y+4, r24	; 0x04
     3fc:	2b c0       	rjmp	.+86     	; 0x454 <rgb_leds_init+0x260>
            led[i-1]=led[i-2];
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	ac 01       	movw	r20, r24
     406:	41 50       	subi	r20, 0x01	; 1
     408:	50 40       	sbci	r21, 0x00	; 0
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9c 01       	movw	r18, r24
     412:	22 50       	subi	r18, 0x02	; 2
     414:	30 40       	sbci	r19, 0x00	; 0
     416:	ca 01       	movw	r24, r20
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	84 0f       	add	r24, r20
     41e:	95 1f       	adc	r25, r21
     420:	ac 01       	movw	r20, r24
     422:	4e 55       	subi	r20, 0x5E	; 94
     424:	5e 4f       	sbci	r21, 0xFE	; 254
     426:	c9 01       	movw	r24, r18
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	82 0f       	add	r24, r18
     42e:	93 1f       	adc	r25, r19
     430:	9c 01       	movw	r18, r24
     432:	2e 55       	subi	r18, 0x5E	; 94
     434:	3e 4f       	sbci	r19, 0xFE	; 254
     436:	ca 01       	movw	r24, r20
     438:	43 e0       	ldi	r20, 0x03	; 3
     43a:	f9 01       	movw	r30, r18
     43c:	00 80       	ld	r0, Z
     43e:	2f 5f       	subi	r18, 0xFF	; 255
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	fc 01       	movw	r30, r24
     444:	00 82       	st	Z, r0
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	41 50       	subi	r20, 0x01	; 1
     44a:	44 23       	and	r20, r20
     44c:	b1 f7       	brne	.-20     	; 0x43a <rgb_leds_init+0x246>
    
	while(1)
    {
        //shift all vallues by one led
        uint8_t i=0;           
        for(i=MAXPIX; i>1; i--) 
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	81 50       	subi	r24, 0x01	; 1
     452:	8c 83       	std	Y+4, r24	; 0x04
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	90 f6       	brcc	.-92     	; 0x3fe <rgb_leds_init+0x20a>
            led[i-1]=led[i-2];
        //change colour when colourlength is reached   
        if(k>COLORLENGTH)
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	80 31       	cpi	r24, 0x10	; 16
     45e:	40 f0       	brcs	.+16     	; 0x470 <rgb_leds_init+0x27c>
        {
            j++;
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	89 83       	std	Y+1, r24	; 0x01
            if(j>7)
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	88 30       	cpi	r24, 0x08	; 8
     46a:	08 f0       	brcs	.+2      	; 0x46e <rgb_leds_init+0x27a>
            {
              j=0;
     46c:	19 82       	std	Y+1, r1	; 0x01
            }

            k=0;
     46e:	1a 82       	std	Y+2, r1	; 0x02
        }
        k++;
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	8a 83       	std	Y+2, r24	; 0x02
        //loop colouers
        
        //fade red
        if(led[0].r<(colors[j].r-FADE))
     476:	80 91 a3 01 	lds	r24, 0x01A3
     47a:	48 2f       	mov	r20, r24
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	28 2f       	mov	r18, r24
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	c9 01       	movw	r24, r18
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
     48e:	85 59       	subi	r24, 0x95	; 149
     490:	9e 4f       	sbci	r25, 0xFE	; 254
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	04 97       	sbiw	r24, 0x04	; 4
     49c:	48 17       	cp	r20, r24
     49e:	59 07       	cpc	r21, r25
     4a0:	2c f4       	brge	.+10     	; 0x4ac <rgb_leds_init+0x2b8>
            led[0].r+=FADE;
     4a2:	80 91 a3 01 	lds	r24, 0x01A3
     4a6:	8c 5f       	subi	r24, 0xFC	; 252
     4a8:	80 93 a3 01 	sts	0x01A3, r24
            
        if(led[0].r>(colors[j].r+FADE))
     4ac:	80 91 a3 01 	lds	r24, 0x01A3
     4b0:	48 2f       	mov	r20, r24
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	c9 01       	movw	r24, r18
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	85 59       	subi	r24, 0x95	; 149
     4c6:	9e 4f       	sbci	r25, 0xFE	; 254
     4c8:	fc 01       	movw	r30, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	04 96       	adiw	r24, 0x04	; 4
     4d2:	84 17       	cp	r24, r20
     4d4:	95 07       	cpc	r25, r21
     4d6:	2c f4       	brge	.+10     	; 0x4e2 <rgb_leds_init+0x2ee>
            led[0].r-=FADE;
     4d8:	80 91 a3 01 	lds	r24, 0x01A3
     4dc:	84 50       	subi	r24, 0x04	; 4
     4de:	80 93 a3 01 	sts	0x01A3, r24

        if(led[0].g<(colors[j].g-FADE))
     4e2:	80 91 a2 01 	lds	r24, 0x01A2
     4e6:	48 2f       	mov	r20, r24
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	c9 01       	movw	r24, r18
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	82 0f       	add	r24, r18
     4f8:	93 1f       	adc	r25, r19
     4fa:	86 59       	subi	r24, 0x96	; 150
     4fc:	9e 4f       	sbci	r25, 0xFE	; 254
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	88 2f       	mov	r24, r24
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	04 97       	sbiw	r24, 0x04	; 4
     508:	48 17       	cp	r20, r24
     50a:	59 07       	cpc	r21, r25
     50c:	2c f4       	brge	.+10     	; 0x518 <rgb_leds_init+0x324>
            led[0].g+=FADE;
     50e:	80 91 a2 01 	lds	r24, 0x01A2
     512:	8c 5f       	subi	r24, 0xFC	; 252
     514:	80 93 a2 01 	sts	0x01A2, r24
            
        if(led[0].g>(colors[j].g+FADE))
     518:	80 91 a2 01 	lds	r24, 0x01A2
     51c:	48 2f       	mov	r20, r24
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	c9 01       	movw	r24, r18
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	82 0f       	add	r24, r18
     52e:	93 1f       	adc	r25, r19
     530:	86 59       	subi	r24, 0x96	; 150
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	04 96       	adiw	r24, 0x04	; 4
     53e:	84 17       	cp	r24, r20
     540:	95 07       	cpc	r25, r21
     542:	2c f4       	brge	.+10     	; 0x54e <rgb_leds_init+0x35a>
            led[0].g-=FADE;
     544:	80 91 a2 01 	lds	r24, 0x01A2
     548:	84 50       	subi	r24, 0x04	; 4
     54a:	80 93 a2 01 	sts	0x01A2, r24

        if(led[0].b<(colors[j].b-FADE))
     54e:	80 91 a4 01 	lds	r24, 0x01A4
     552:	48 2f       	mov	r20, r24
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	28 2f       	mov	r18, r24
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	c9 01       	movw	r24, r18
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	84 59       	subi	r24, 0x94	; 148
     568:	9e 4f       	sbci	r25, 0xFE	; 254
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	04 97       	sbiw	r24, 0x04	; 4
     574:	48 17       	cp	r20, r24
     576:	59 07       	cpc	r21, r25
     578:	2c f4       	brge	.+10     	; 0x584 <rgb_leds_init+0x390>
            led[0].b+=FADE;
     57a:	80 91 a4 01 	lds	r24, 0x01A4
     57e:	8c 5f       	subi	r24, 0xFC	; 252
     580:	80 93 a4 01 	sts	0x01A4, r24
            
        if(led[0].b>(colors[j].b+FADE))
     584:	80 91 a4 01 	lds	r24, 0x01A4
     588:	48 2f       	mov	r20, r24
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	c9 01       	movw	r24, r18
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	84 59       	subi	r24, 0x94	; 148
     59e:	9e 4f       	sbci	r25, 0xFE	; 254
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	88 2f       	mov	r24, r24
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	04 96       	adiw	r24, 0x04	; 4
     5aa:	84 17       	cp	r24, r20
     5ac:	95 07       	cpc	r25, r21
     5ae:	2c f4       	brge	.+10     	; 0x5ba <rgb_leds_init+0x3c6>
            led[0].b-=FADE;
     5b0:	80 91 a4 01 	lds	r24, 0x01A4
     5b4:	84 50       	subi	r24, 0x04	; 4
     5b6:	80 93 a4 01 	sts	0x01A4, r24
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	a0 e2       	ldi	r26, 0x20	; 32
     5c0:	b1 e4       	ldi	r27, 0x41	; 65
     5c2:	8f 83       	std	Y+7, r24	; 0x07
     5c4:	98 87       	std	Y+8, r25	; 0x08
     5c6:	a9 87       	std	Y+9, r26	; 0x09
     5c8:	ba 87       	std	Y+10, r27	; 0x0a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ca:	6f 81       	ldd	r22, Y+7	; 0x07
     5cc:	78 85       	ldd	r23, Y+8	; 0x08
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	4a e7       	ldi	r20, 0x7A	; 122
     5d8:	55 e4       	ldi	r21, 0x45	; 69
     5da:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	8b 87       	std	Y+11, r24	; 0x0b
     5e4:	9c 87       	std	Y+12, r25	; 0x0c
     5e6:	ad 87       	std	Y+13, r26	; 0x0d
     5e8:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     5ea:	11 e0       	ldi	r17, 0x01	; 1
     5ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     5f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     600:	88 23       	and	r24, r24
     602:	0c f0       	brlt	.+2      	; 0x606 <rgb_leds_init+0x412>
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	11 23       	and	r17, r17
     608:	29 f0       	breq	.+10     	; 0x614 <rgb_leds_init+0x420>
		__ticks = 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	98 8b       	std	Y+16, r25	; 0x10
     610:	8f 87       	std	Y+15, r24	; 0x0f
     612:	46 c0       	rjmp	.+140    	; 0x6a0 <rgb_leds_init+0x4ac>
	else if (__tmp > 65535)
     614:	11 e0       	ldi	r17, 0x01	; 1
     616:	6b 85       	ldd	r22, Y+11	; 0x0b
     618:	7c 85       	ldd	r23, Y+12	; 0x0c
     61a:	8d 85       	ldd	r24, Y+13	; 0x0d
     61c:	9e 85       	ldd	r25, Y+14	; 0x0e
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	3f ef       	ldi	r19, 0xFF	; 255
     622:	4f e7       	ldi	r20, 0x7F	; 127
     624:	57 e4       	ldi	r21, 0x47	; 71
     626:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <rgb_leds_init+0x43c>
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	11 23       	and	r17, r17
     632:	61 f1       	breq	.+88     	; 0x68c <rgb_leds_init+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     634:	6f 81       	ldd	r22, Y+7	; 0x07
     636:	78 85       	ldd	r23, Y+8	; 0x08
     638:	89 85       	ldd	r24, Y+9	; 0x09
     63a:	9a 85       	ldd	r25, Y+10	; 0x0a
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e2       	ldi	r20, 0x20	; 32
     642:	51 e4       	ldi	r21, 0x41	; 65
     644:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	98 8b       	std	Y+16, r25	; 0x10
     65a:	8f 87       	std	Y+15, r24	; 0x0f
     65c:	12 c0       	rjmp	.+36     	; 0x682 <rgb_leds_init+0x48e>
     65e:	80 e9       	ldi	r24, 0x90	; 144
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	9a 8b       	std	Y+18, r25	; 0x12
     664:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     666:	89 89       	ldd	r24, Y+17	; 0x11
     668:	9a 89       	ldd	r25, Y+18	; 0x12
     66a:	8c 01       	movw	r16, r24
     66c:	c8 01       	movw	r24, r16
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <rgb_leds_init+0x47a>
     672:	8c 01       	movw	r16, r24
     674:	1a 8b       	std	Y+18, r17	; 0x12
     676:	09 8b       	std	Y+17, r16	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     678:	8f 85       	ldd	r24, Y+15	; 0x0f
     67a:	98 89       	ldd	r25, Y+16	; 0x10
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	98 8b       	std	Y+16, r25	; 0x10
     680:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     682:	8f 85       	ldd	r24, Y+15	; 0x0f
     684:	98 89       	ldd	r25, Y+16	; 0x10
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	51 f7       	brne	.-44     	; 0x65e <rgb_leds_init+0x46a>
     68a:	17 c0       	rjmp	.+46     	; 0x6ba <rgb_leds_init+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     68c:	6b 85       	ldd	r22, Y+11	; 0x0b
     68e:	7c 85       	ldd	r23, Y+12	; 0x0c
     690:	8d 85       	ldd	r24, Y+13	; 0x0d
     692:	9e 85       	ldd	r25, Y+14	; 0x0e
     694:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	98 8b       	std	Y+16, r25	; 0x10
     69e:	8f 87       	std	Y+15, r24	; 0x0f
     6a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a2:	98 89       	ldd	r25, Y+16	; 0x10
     6a4:	9c 8b       	std	Y+20, r25	; 0x14
     6a6:	8b 8b       	std	Y+19, r24	; 0x13
     6a8:	8b 89       	ldd	r24, Y+19	; 0x13
     6aa:	9c 89       	ldd	r25, Y+20	; 0x14
     6ac:	8c 01       	movw	r16, r24
     6ae:	f8 01       	movw	r30, r16
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <rgb_leds_init+0x4bc>
     6b4:	8f 01       	movw	r16, r30
     6b6:	1c 8b       	std	Y+20, r17	; 0x14
     6b8:	0b 8b       	std	Y+19, r16	; 0x13

		 _delay_ms(10);
		 ws2812_sendarray((uint8_t *)led,MAXPIX*3);
     6ba:	82 ea       	ldi	r24, 0xA2	; 162
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	6a e5       	ldi	r22, 0x5A	; 90
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ws2812_sendarray>
    }
     6c6:	97 ce       	rjmp	.-722    	; 0x3f6 <rgb_leds_init+0x202>

000006c8 <rgb_read_data>:
		char r= 0;
		char g= 0;
		char b= 0;

void rgb_read_data()
{
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	6e 97       	sbiw	r28, 0x1e	; 30
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
	uint8_t j = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t k = 1;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	8e 83       	std	Y+6, r24	; 0x06
	

	DDRB|=_BV(ws2812_pin);
     6e8:	84 e2       	ldi	r24, 0x24	; 36
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	24 e2       	ldi	r18, 0x24	; 36
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	21 60       	ori	r18, 0x01	; 1
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18

  
   

	for(int i=0; i<MAXPIX; i++)
     6fa:	1a 82       	std	Y+2, r1	; 0x02
     6fc:	19 82       	std	Y+1, r1	; 0x01
     6fe:	26 c0       	rjmp	.+76     	; 0x74c <rgb_read_data+0x84>
		{
			led[i].r=0; led[i].g=0;  led[i].b=0;
     700:	29 81       	ldd	r18, Y+1	; 0x01
     702:	3a 81       	ldd	r19, Y+2	; 0x02
     704:	c9 01       	movw	r24, r18
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	8d 55       	subi	r24, 0x5D	; 93
     710:	9e 4f       	sbci	r25, 0xFE	; 254
     712:	fc 01       	movw	r30, r24
     714:	10 82       	st	Z, r1
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	3a 81       	ldd	r19, Y+2	; 0x02
     71a:	c9 01       	movw	r24, r18
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	8e 55       	subi	r24, 0x5E	; 94
     726:	9e 4f       	sbci	r25, 0xFE	; 254
     728:	fc 01       	movw	r30, r24
     72a:	10 82       	st	Z, r1
     72c:	29 81       	ldd	r18, Y+1	; 0x01
     72e:	3a 81       	ldd	r19, Y+2	; 0x02
     730:	c9 01       	movw	r24, r18
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	8c 55       	subi	r24, 0x5C	; 92
     73c:	9e 4f       	sbci	r25, 0xFE	; 254
     73e:	fc 01       	movw	r30, r24
     740:	10 82       	st	Z, r1
	DDRB|=_BV(ws2812_pin);

  
   

	for(int i=0; i<MAXPIX; i++)
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	8e 31       	cpi	r24, 0x1E	; 30
     752:	91 05       	cpc	r25, r1
     754:	ac f2       	brlt	.-86     	; 0x700 <rgb_read_data+0x38>
		{
			led[i].r=0; led[i].g=0;  led[i].b=0;

		}

		int rr=r;
     756:	80 91 20 01 	lds	r24, 0x0120
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	98 87       	std	Y+8, r25	; 0x08
     760:	8f 83       	std	Y+7, r24	; 0x07
		int gg=g;
     762:	80 91 21 01 	lds	r24, 0x0121
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	9a 87       	std	Y+10, r25	; 0x0a
     76c:	89 87       	std	Y+9, r24	; 0x09
		int bb=b;
     76e:	80 91 22 01 	lds	r24, 0x0122
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	9c 87       	std	Y+12, r25	; 0x0c
     778:	8b 87       	std	Y+11, r24	; 0x0b
		int start=num_start;
     77a:	80 91 1e 01 	lds	r24, 0x011E
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	9e 87       	std	Y+14, r25	; 0x0e
     784:	8d 87       	std	Y+13, r24	; 0x0d
		int end=num_end;
     786:	80 91 1f 01 	lds	r24, 0x011F
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	98 8b       	std	Y+16, r25	; 0x10
     790:	8f 87       	std	Y+15, r24	; 0x0f

		for(int i=start; i<=end; i++)
     792:	8d 85       	ldd	r24, Y+13	; 0x0d
     794:	9e 85       	ldd	r25, Y+14	; 0x0e
     796:	9c 83       	std	Y+4, r25	; 0x04
     798:	8b 83       	std	Y+3, r24	; 0x03
     79a:	29 c0       	rjmp	.+82     	; 0x7ee <rgb_read_data+0x126>
		{
			led[i].r=rr; led[i].g=gg;  led[i].b=bb;
     79c:	4f 81       	ldd	r20, Y+7	; 0x07
     79e:	2b 81       	ldd	r18, Y+3	; 0x03
     7a0:	3c 81       	ldd	r19, Y+4	; 0x04
     7a2:	c9 01       	movw	r24, r18
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	8d 55       	subi	r24, 0x5D	; 93
     7ae:	9e 4f       	sbci	r25, 0xFE	; 254
     7b0:	fc 01       	movw	r30, r24
     7b2:	40 83       	st	Z, r20
     7b4:	49 85       	ldd	r20, Y+9	; 0x09
     7b6:	2b 81       	ldd	r18, Y+3	; 0x03
     7b8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ba:	c9 01       	movw	r24, r18
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	82 0f       	add	r24, r18
     7c2:	93 1f       	adc	r25, r19
     7c4:	8e 55       	subi	r24, 0x5E	; 94
     7c6:	9e 4f       	sbci	r25, 0xFE	; 254
     7c8:	fc 01       	movw	r30, r24
     7ca:	40 83       	st	Z, r20
     7cc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ce:	2b 81       	ldd	r18, Y+3	; 0x03
     7d0:	3c 81       	ldd	r19, Y+4	; 0x04
     7d2:	c9 01       	movw	r24, r18
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	82 0f       	add	r24, r18
     7da:	93 1f       	adc	r25, r19
     7dc:	8c 55       	subi	r24, 0x5C	; 92
     7de:	9e 4f       	sbci	r25, 0xFE	; 254
     7e0:	fc 01       	movw	r30, r24
     7e2:	40 83       	st	Z, r20
		int gg=g;
		int bb=b;
		int start=num_start;
		int end=num_end;

		for(int i=start; i<=end; i++)
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	9c 83       	std	Y+4, r25	; 0x04
     7ec:	8b 83       	std	Y+3, r24	; 0x03
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f4:	98 89       	ldd	r25, Y+16	; 0x10
     7f6:	82 17       	cp	r24, r18
     7f8:	93 07       	cpc	r25, r19
     7fa:	84 f6       	brge	.-96     	; 0x79c <rgb_read_data+0xd4>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	a0 e2       	ldi	r26, 0x20	; 32
     802:	b1 e4       	ldi	r27, 0x41	; 65
     804:	89 8b       	std	Y+17, r24	; 0x11
     806:	9a 8b       	std	Y+18, r25	; 0x12
     808:	ab 8b       	std	Y+19, r26	; 0x13
     80a:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     80c:	69 89       	ldd	r22, Y+17	; 0x11
     80e:	7a 89       	ldd	r23, Y+18	; 0x12
     810:	8b 89       	ldd	r24, Y+19	; 0x13
     812:	9c 89       	ldd	r25, Y+20	; 0x14
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	4a e7       	ldi	r20, 0x7A	; 122
     81a:	55 e4       	ldi	r21, 0x45	; 69
     81c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	8d 8b       	std	Y+21, r24	; 0x15
     826:	9e 8b       	std	Y+22, r25	; 0x16
     828:	af 8b       	std	Y+23, r26	; 0x17
     82a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     82c:	11 e0       	ldi	r17, 0x01	; 1
     82e:	6d 89       	ldd	r22, Y+21	; 0x15
     830:	7e 89       	ldd	r23, Y+22	; 0x16
     832:	8f 89       	ldd	r24, Y+23	; 0x17
     834:	98 8d       	ldd	r25, Y+24	; 0x18
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     842:	88 23       	and	r24, r24
     844:	0c f0       	brlt	.+2      	; 0x848 <rgb_read_data+0x180>
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	11 23       	and	r17, r17
     84a:	29 f0       	breq	.+10     	; 0x856 <rgb_read_data+0x18e>
		__ticks = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9a 8f       	std	Y+26, r25	; 0x1a
     852:	89 8f       	std	Y+25, r24	; 0x19
     854:	46 c0       	rjmp	.+140    	; 0x8e2 <rgb_read_data+0x21a>
	else if (__tmp > 65535)
     856:	11 e0       	ldi	r17, 0x01	; 1
     858:	6d 89       	ldd	r22, Y+21	; 0x15
     85a:	7e 89       	ldd	r23, Y+22	; 0x16
     85c:	8f 89       	ldd	r24, Y+23	; 0x17
     85e:	98 8d       	ldd	r25, Y+24	; 0x18
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	3f ef       	ldi	r19, 0xFF	; 255
     864:	4f e7       	ldi	r20, 0x7F	; 127
     866:	57 e4       	ldi	r21, 0x47	; 71
     868:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
     86c:	18 16       	cp	r1, r24
     86e:	0c f0       	brlt	.+2      	; 0x872 <rgb_read_data+0x1aa>
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	11 23       	and	r17, r17
     874:	61 f1       	breq	.+88     	; 0x8ce <rgb_read_data+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     876:	69 89       	ldd	r22, Y+17	; 0x11
     878:	7a 89       	ldd	r23, Y+18	; 0x12
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	bc 01       	movw	r22, r24
     890:	cd 01       	movw	r24, r26
     892:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	9a 8f       	std	Y+26, r25	; 0x1a
     89c:	89 8f       	std	Y+25, r24	; 0x19
     89e:	12 c0       	rjmp	.+36     	; 0x8c4 <rgb_read_data+0x1fc>
     8a0:	80 e9       	ldi	r24, 0x90	; 144
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9c 8f       	std	Y+28, r25	; 0x1c
     8a6:	8b 8f       	std	Y+27, r24	; 0x1b
     8a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8ac:	8c 01       	movw	r16, r24
     8ae:	c8 01       	movw	r24, r16
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <rgb_read_data+0x1e8>
     8b4:	8c 01       	movw	r16, r24
     8b6:	1c 8f       	std	Y+28, r17	; 0x1c
     8b8:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ba:	89 8d       	ldd	r24, Y+25	; 0x19
     8bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	9a 8f       	std	Y+26, r25	; 0x1a
     8c2:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c4:	89 8d       	ldd	r24, Y+25	; 0x19
     8c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	51 f7       	brne	.-44     	; 0x8a0 <rgb_read_data+0x1d8>
     8cc:	17 c0       	rjmp	.+46     	; 0x8fc <rgb_read_data+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ce:	6d 89       	ldd	r22, Y+21	; 0x15
     8d0:	7e 89       	ldd	r23, Y+22	; 0x16
     8d2:	8f 89       	ldd	r24, Y+23	; 0x17
     8d4:	98 8d       	ldd	r25, Y+24	; 0x18
     8d6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	9a 8f       	std	Y+26, r25	; 0x1a
     8e0:	89 8f       	std	Y+25, r24	; 0x19
     8e2:	89 8d       	ldd	r24, Y+25	; 0x19
     8e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8e6:	9e 8f       	std	Y+30, r25	; 0x1e
     8e8:	8d 8f       	std	Y+29, r24	; 0x1d
     8ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8ee:	8c 01       	movw	r16, r24
     8f0:	f8 01       	movw	r30, r16
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <rgb_read_data+0x22a>
     8f6:	8f 01       	movw	r16, r30
     8f8:	1e 8f       	std	Y+30, r17	; 0x1e
     8fa:	0d 8f       	std	Y+29, r16	; 0x1d
			//led[i].r=100; led[i].g=100;  led[i].b=100;
			//BufferForUART[DATA]
		}

		 _delay_ms(10);
		 ws2812_sendarray((uint8_t *)led,MAXPIX*3);
     8fc:	82 ea       	ldi	r24, 0xA2	; 162
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	6a e5       	ldi	r22, 0x5A	; 90
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ws2812_sendarray>
    
}
     908:	6e 96       	adiw	r28, 0x1e	; 30
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <ReciveNewData>:


/**********************************************************************************/
void ReciveNewData(void)
{	
     91e:	df 93       	push	r29
     920:	cf 93       	push	r28
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62

	if(!(CheckCRC()))
     926:	0e 94 8e 00 	call	0x11c	; 0x11c <CheckCRC>
     92a:	88 23       	and	r24, r24
     92c:	09 f0       	breq	.+2      	; 0x930 <ReciveNewData+0x12>
     92e:	8c c0       	rjmp	.+280    	; 0xa48 <ReciveNewData+0x12a>
	{


		if( BufferForUART[CMD] != RESET  )//? (NoRepetitionByte != BufferForUART[CHK]) : 1
     930:	80 91 85 01 	lds	r24, 0x0185
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f4       	brne	.+2      	; 0x93a <ReciveNewData+0x1c>
     938:	87 c0       	rjmp	.+270    	; 0xa48 <ReciveNewData+0x12a>
		{

			switch(BufferForUART[CMD])
     93a:	80 91 85 01 	lds	r24, 0x0185
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	84 30       	cpi	r24, 0x04	; 4
     944:	91 05       	cpc	r25, r1
     946:	d1 f1       	breq	.+116    	; 0x9bc <ReciveNewData+0x9e>
     948:	85 30       	cpi	r24, 0x05	; 5
     94a:	91 05       	cpc	r25, r1
     94c:	3c f4       	brge	.+14     	; 0x95c <ReciveNewData+0x3e>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	91 05       	cpc	r25, r1
     952:	49 f0       	breq	.+18     	; 0x966 <ReciveNewData+0x48>
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	41 f0       	breq	.+16     	; 0x96a <ReciveNewData+0x4c>

					break;
//------------------------------------------------------ end leds				

				default:
					break;
     95a:	72 c0       	rjmp	.+228    	; 0xa40 <ReciveNewData+0x122>


		if( BufferForUART[CMD] != RESET  )//? (NoRepetitionByte != BufferForUART[CHK]) : 1
		{

			switch(BufferForUART[CMD])
     95c:	85 30       	cpi	r24, 0x05	; 5
     95e:	91 05       	cpc	r25, r1
     960:	09 f4       	brne	.+2      	; 0x964 <ReciveNewData+0x46>
     962:	55 c0       	rjmp	.+170    	; 0xa0e <ReciveNewData+0xf0>
						//num_end= MAXPIX;
						//r= 0;
						//g= 0;
						//b= 0;

					break;
     964:	6d c0       	rjmp	.+218    	; 0xa40 <ReciveNewData+0x122>
		{

			switch(BufferForUART[CMD])
			{
				case RESET:
					asm ("rjmp 0");
     966:	9f cb       	rjmp	.-2242   	; 0xa6 <InitPins>
					break;
     968:	6b c0       	rjmp	.+214    	; 0xa40 <ReciveNewData+0x122>
			//		RTOS_SetTask(ProcPOLL, 0, 0);
			//		break;

				case OPEN_1:

					if(PIND & ~(1<<PD6))//PIND == (1<<PD6)
     96a:	89 e2       	ldi	r24, 0x29	; 41
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	8f 7b       	andi	r24, 0xBF	; 191
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	99 f0       	breq	.+38     	; 0x9a2 <ReciveNewData+0x84>
					{
						DDRC =  0x00;
     97c:	87 e2       	ldi	r24, 0x27	; 39
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	fc 01       	movw	r30, r24
     982:	10 82       	st	Z, r1
   						PORTC = 0x00;
     984:	88 e2       	ldi	r24, 0x28	; 40
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	10 82       	st	Z, r1
						//////////////////
						DDRC =   (1<<PC4);
     98c:	87 e2       	ldi	r24, 0x27	; 39
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	20 e1       	ldi	r18, 0x10	; 16
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
   						PORTC = ~(1<<PC4); 
     996:	88 e2       	ldi	r24, 0x28	; 40
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2f ee       	ldi	r18, 0xEF	; 239
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
					{
						DDRC =  0x00;
   						PORTC = 0x00;
						USART1_SendStr(NAK);
					}
					break;
     9a0:	4f c0       	rjmp	.+158    	; 0xa40 <ReciveNewData+0x122>
						DDRC =   (1<<PC4);
   						PORTC = ~(1<<PC4); 
					}
					else
					{
						DDRC =  0x00;
     9a2:	87 e2       	ldi	r24, 0x27	; 39
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	10 82       	st	Z, r1
   						PORTC = 0x00;
     9aa:	88 e2       	ldi	r24, 0x28	; 40
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	fc 01       	movw	r30, r24
     9b0:	10 82       	st	Z, r1
						USART1_SendStr(NAK);
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 f0 06 	call	0xde0	; 0xde0 <USART1_SendStr>
					}
					break;
     9ba:	42 c0       	rjmp	.+132    	; 0xa40 <ReciveNewData+0x122>

				case CLOSE_1:

					
					if(PIND & ~(1<<PD7))//
     9bc:	89 e2       	ldi	r24, 0x29	; 41
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	88 2f       	mov	r24, r24
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8f 77       	andi	r24, 0x7F	; 127
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	99 f0       	breq	.+38     	; 0x9f4 <ReciveNewData+0xd6>
					{
						DDRC =  0x00;
     9ce:	87 e2       	ldi	r24, 0x27	; 39
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	10 82       	st	Z, r1
   						PORTC = 0x00;
     9d6:	88 e2       	ldi	r24, 0x28	; 40
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	fc 01       	movw	r30, r24
     9dc:	10 82       	st	Z, r1
						///////////////////
						DDRC =   (1<<PC5);
     9de:	87 e2       	ldi	r24, 0x27	; 39
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	20 e2       	ldi	r18, 0x20	; 32
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
   						PORTC = ~(1<<PC5); 
     9e8:	88 e2       	ldi	r24, 0x28	; 40
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2f ed       	ldi	r18, 0xDF	; 223
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
					{
						DDRC =  0x00;
   						PORTC = 0x00;
						USART1_SendStr(NAK);
					}
					break;
     9f2:	26 c0       	rjmp	.+76     	; 0xa40 <ReciveNewData+0x122>
						DDRC =   (1<<PC5);
   						PORTC = ~(1<<PC5); 
					}
					else
					{
						DDRC =  0x00;
     9f4:	87 e2       	ldi	r24, 0x27	; 39
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	fc 01       	movw	r30, r24
     9fa:	10 82       	st	Z, r1
   						PORTC = 0x00;
     9fc:	88 e2       	ldi	r24, 0x28	; 40
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	10 82       	st	Z, r1
						USART1_SendStr(NAK);
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 f0 06 	call	0xde0	; 0xde0 <USART1_SendStr>
					}
					break;
     a0c:	19 c0       	rjmp	.+50     	; 0xa40 <ReciveNewData+0x122>

//--------------------------------------------------------leds
				case LEDS:
					
						RTOS_DeleteTask( rgb_read_data);
     a0e:	84 e6       	ldi	r24, 0x64	; 100
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
						num_start= BufferForUART[DATA];
     a16:	80 91 86 01 	lds	r24, 0x0186
     a1a:	80 93 1e 01 	sts	0x011E, r24
						num_end= BufferForUART[DATA+1];
     a1e:	80 91 87 01 	lds	r24, 0x0187
     a22:	80 93 1f 01 	sts	0x011F, r24
						r= BufferForUART[DATA+2];
     a26:	80 91 88 01 	lds	r24, 0x0188
     a2a:	80 93 20 01 	sts	0x0120, r24
						g= BufferForUART[DATA+3];
     a2e:	80 91 89 01 	lds	r24, 0x0189
     a32:	80 93 21 01 	sts	0x0121, r24
						b= BufferForUART[DATA+4];
     a36:	80 91 8a 01 	lds	r24, 0x018A
     a3a:	80 93 22 01 	sts	0x0122, r24
					//	RTOS_SetTask( rgb_read_data, 0, 10);
					break;
     a3e:	00 00       	nop
//------------------------------------------------------ end leds				

				default:
					break;
			}
			NoRepetitionByte = BufferForUART[CHK];
     a40:	80 91 83 01 	lds	r24, 0x0183
     a44:	80 93 00 01 	sts	0x0100, r24
		}
		//BufferForUART[CTL] = 0;
		//UCSR0B |= (1<<RXCIE0);
	}
	BufferForUART[CTL] = 0;
     a48:	10 92 82 01 	sts	0x0182, r1
	UCSR0B |= (1<<RXCIE0);
     a4c:	81 ec       	ldi	r24, 0xC1	; 193
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	21 ec       	ldi	r18, 0xC1	; 193
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	20 81       	ld	r18, Z
     a58:	20 68       	ori	r18, 0x80	; 128
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <ProcPOLL>:


/**********************************************************************************/
void ProcPOLL(void)
{
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	df 93       	push	r29
     a6a:	cf 93       	push	r28
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
	if(WorkState != NO_OPERANION)
     a70:	80 91 1b 01 	lds	r24, 0x011B
     a74:	88 23       	and	r24, r24
     a76:	31 f1       	breq	.+76     	; 0xac4 <ProcPOLL+0x60>
	{
		BufferForState[CountByteBuffer++] = WorkState;
     a78:	20 91 0e 01 	lds	r18, 0x010E
     a7c:	82 2f       	mov	r24, r18
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	30 91 1b 01 	lds	r19, 0x011B
     a84:	84 50       	subi	r24, 0x04	; 4
     a86:	9e 4f       	sbci	r25, 0xFE	; 254
     a88:	fc 01       	movw	r30, r24
     a8a:	30 83       	st	Z, r19
     a8c:	82 2f       	mov	r24, r18
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 0e 01 	sts	0x010E, r24
		BufferForState[CountByteBuffer++] = 0;
     a94:	20 91 0e 01 	lds	r18, 0x010E
     a98:	82 2f       	mov	r24, r18
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	84 50       	subi	r24, 0x04	; 4
     a9e:	9e 4f       	sbci	r25, 0xFE	; 254
     aa0:	fc 01       	movw	r30, r24
     aa2:	10 82       	st	Z, r1
     aa4:	82 2f       	mov	r24, r18
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 0e 01 	sts	0x010E, r24
		BufferForState[CountByteBuffer++] = 0;
     aac:	20 91 0e 01 	lds	r18, 0x010E
     ab0:	82 2f       	mov	r24, r18
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	84 50       	subi	r24, 0x04	; 4
     ab6:	9e 4f       	sbci	r25, 0xFE	; 254
     ab8:	fc 01       	movw	r30, r24
     aba:	10 82       	st	Z, r1
     abc:	82 2f       	mov	r24, r18
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	80 93 0e 01 	sts	0x010E, r24
	}
	if(CountByteBuffer == 2)
     ac4:	80 91 0e 01 	lds	r24, 0x010E
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	29 f4       	brne	.+10     	; 0xad6 <ProcPOLL+0x72>
	{
		USART1_SendStr(ASK);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 f0 06 	call	0xde0	; 0xde0 <USART1_SendStr>
     ad4:	22 c0       	rjmp	.+68     	; 0xb1a <ProcPOLL+0xb6>
	}
	else
	{
		BufferForState[CTL] = 0xF7;
     ad6:	87 ef       	ldi	r24, 0xF7	; 247
     ad8:	80 93 fc 01 	sts	0x01FC, r24
		BufferForState[SIZE - 1] = CountByteBuffer - 3;
     adc:	80 91 0e 01 	lds	r24, 0x010E
     ae0:	83 50       	subi	r24, 0x03	; 3
     ae2:	80 93 fd 01 	sts	0x01FD, r24
		BufferForState[CountByteBuffer] = CountCRC(BufferForState, (CountByteBuffer - 1));
     ae6:	80 91 0e 01 	lds	r24, 0x010E
     aea:	08 2f       	mov	r16, r24
     aec:	10 e0       	ldi	r17, 0x00	; 0
     aee:	80 91 0e 01 	lds	r24, 0x010E
     af2:	28 2f       	mov	r18, r24
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	8c ef       	ldi	r24, 0xFC	; 252
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	62 2f       	mov	r22, r18
     afc:	0e 94 cb 00 	call	0x196	; 0x196 <CountCRC>
     b00:	28 2f       	mov	r18, r24
     b02:	c8 01       	movw	r24, r16
     b04:	84 50       	subi	r24, 0x04	; 4
     b06:	9e 4f       	sbci	r25, 0xFE	; 254
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
		USART1_SendStr(BufferForState);
     b0c:	8c ef       	ldi	r24, 0xFC	; 252
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 f0 06 	call	0xde0	; 0xde0 <USART1_SendStr>
		CountByteBuffer = 2;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	80 93 0e 01 	sts	0x010E, r24
	}
}
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <ProcASCROW>:
/**********************************************************************************/
void ProcASCROW(void)
{
     b24:	df 93       	push	r29
     b26:	cf 93       	push	r28
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
	static unsigned char AscrowStateMachine = 0;

	switch(AscrowStateMachine)
     b2c:	80 91 27 01 	lds	r24, 0x0127
     b30:	88 2f       	mov	r24, r24
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	91 05       	cpc	r25, r1
     b38:	09 f4       	brne	.+2      	; 0xb3c <ProcASCROW+0x18>
     b3a:	58 c0       	rjmp	.+176    	; 0xbec <ProcASCROW+0xc8>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	91 05       	cpc	r25, r1
     b40:	1c f4       	brge	.+6      	; 0xb48 <ProcASCROW+0x24>
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	51 f0       	breq	.+20     	; 0xb5a <ProcASCROW+0x36>
			LedSysEnable = DISABLE;
			break;
			

		default:
			break;
     b46:	ad c0       	rjmp	.+346    	; 0xca2 <ProcASCROW+0x17e>
/**********************************************************************************/
void ProcASCROW(void)
{
	static unsigned char AscrowStateMachine = 0;

	switch(AscrowStateMachine)
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	91 05       	cpc	r25, r1
     b4c:	09 f4       	brne	.+2      	; 0xb50 <ProcASCROW+0x2c>
     b4e:	5f c0       	rjmp	.+190    	; 0xc0e <ProcASCROW+0xea>
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	91 05       	cpc	r25, r1
     b54:	09 f4       	brne	.+2      	; 0xb58 <ProcASCROW+0x34>
     b56:	85 c0       	rjmp	.+266    	; 0xc62 <ProcASCROW+0x13e>
			LedSysEnable = DISABLE;
			break;
			

		default:
			break;
     b58:	a4 c0       	rjmp	.+328    	; 0xca2 <ProcASCROW+0x17e>
	static unsigned char AscrowStateMachine = 0;

	switch(AscrowStateMachine)
	{
		case 0:
			BusyFlag = BUSY;//включаем мотор, если не выполняетя движение
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 0d 01 	sts	0x010D, r24
			if(WorkState == IN_ASCROWING)
     b60:	80 91 1b 01 	lds	r24, 0x011B
     b64:	83 31       	cpi	r24, 0x13	; 19
     b66:	99 f4       	brne	.+38     	; 0xb8e <ProcASCROW+0x6a>
				MOTOR_RIGHT;
     b68:	88 e2       	ldi	r24, 0x28	; 40
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	28 e2       	ldi	r18, 0x28	; 40
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	28 61       	ori	r18, 0x18	; 24
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
     b7a:	88 e2       	ldi	r24, 0x28	; 40
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	28 e2       	ldi	r18, 0x28	; 40
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	2f 7e       	andi	r18, 0xEF	; 239
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <ProcASCROW+0x96>
			else if (WorkState == IN_NO_ASCROWING)
     b8e:	80 91 1b 01 	lds	r24, 0x011B
     b92:	84 31       	cpi	r24, 0x14	; 20
     b94:	91 f4       	brne	.+36     	; 0xbba <ProcASCROW+0x96>
				MOTOR_LEFT;
     b96:	88 e2       	ldi	r24, 0x28	; 40
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	28 e2       	ldi	r18, 0x28	; 40
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	f9 01       	movw	r30, r18
     ba0:	20 81       	ld	r18, Z
     ba2:	28 61       	ori	r18, 0x18	; 24
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
     ba8:	88 e2       	ldi	r24, 0x28	; 40
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	28 e2       	ldi	r18, 0x28	; 40
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	f9 01       	movw	r30, r18
     bb2:	20 81       	ld	r18, Z
     bb4:	27 7f       	andi	r18, 0xF7	; 247
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
			SoftTimer = 0;
     bba:	10 92 1d 01 	sts	0x011D, r1
     bbe:	10 92 1c 01 	sts	0x011C, r1
			AscrowStateMachine = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 27 01 	sts	0x0127, r24
			LED_SYS_ON;
     bc8:	85 e2       	ldi	r24, 0x25	; 37
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	25 e2       	ldi	r18, 0x25	; 37
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	20 62       	ori	r18, 0x20	; 32
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
			RTOS_SetTask(ledoff, 500, 0);
     bda:	84 e5       	ldi	r24, 0x54	; 84
     bdc:	96 e0       	ldi	r25, 0x06	; 6
     bde:	64 ef       	ldi	r22, 0xF4	; 244
     be0:	71 e0       	ldi	r23, 0x01	; 1
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <RTOS_SetTask>
			break;
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <ProcASCROW+0x17e>

		case 1:
			if(SoftTimer >= 2500)//время для надатия концевика
     bec:	80 91 1c 01 	lds	r24, 0x011C
     bf0:	90 91 1d 01 	lds	r25, 0x011D
     bf4:	f9 e0       	ldi	r31, 0x09	; 9
     bf6:	84 3c       	cpi	r24, 0xC4	; 196
     bf8:	9f 07       	cpc	r25, r31
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <ProcASCROW+0xda>
     bfc:	4f c0       	rjmp	.+158    	; 0xc9c <ProcASCROW+0x178>
			{
				AscrowStateMachine = 2;
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	80 93 27 01 	sts	0x0127, r24
				SoftTimer = 0;
     c04:	10 92 1d 01 	sts	0x011D, r1
     c08:	10 92 1c 01 	sts	0x011C, r1
			}
			break;
     c0c:	4a c0       	rjmp	.+148    	; 0xca2 <ProcASCROW+0x17e>

		case 2:
			if(PINC & (1<<PC5))//ждем, когда концевиек отожмется
     c0e:	86 e2       	ldi	r24, 0x26	; 38
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 72       	andi	r24, 0x20	; 32
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	a1 f0       	breq	.+40     	; 0xc4a <ProcASCROW+0x126>
			{
				MOTOR_STOP;
     c22:	88 e2       	ldi	r24, 0x28	; 40
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	28 e2       	ldi	r18, 0x28	; 40
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	28 61       	ori	r18, 0x18	; 24
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
				AscrowStateMachine = 0;
     c34:	10 92 27 01 	sts	0x0127, r1
				RTOS_DeleteTask(ProcASCROW);
     c38:	82 e9       	ldi	r24, 0x92	; 146
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
				BusyFlag  = FREE;
     c40:	10 92 0d 01 	sts	0x010D, r1
				WorkState = NO_OPERANION;
     c44:	10 92 1b 01 	sts	0x011B, r1
				break;
     c48:	2c c0       	rjmp	.+88     	; 0xca2 <ProcASCROW+0x17e>
			}
			if(SoftTimer >= 5000)//таймаут для определения сработки концевика
     c4a:	80 91 1c 01 	lds	r24, 0x011C
     c4e:	90 91 1d 01 	lds	r25, 0x011D
     c52:	f3 e1       	ldi	r31, 0x13	; 19
     c54:	88 38       	cpi	r24, 0x88	; 136
     c56:	9f 07       	cpc	r25, r31
     c58:	18 f1       	brcs	.+70     	; 0xca0 <ProcASCROW+0x17c>
			{
				AscrowStateMachine = 3;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	80 93 27 01 	sts	0x0127, r24
				break;
     c60:	20 c0       	rjmp	.+64     	; 0xca2 <ProcASCROW+0x17e>
			}
			break;

		case 3:
			MOTOR_STOP;
     c62:	88 e2       	ldi	r24, 0x28	; 40
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	28 e2       	ldi	r18, 0x28	; 40
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	28 61       	ori	r18, 0x18	; 24
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
			WorkState = GENERAL_FAILURE;//ошибка, если концевик так и не сработал(сломался)
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 1b 01 	sts	0x011B, r24
			RTOS_DeleteTask(ProcASCROW);
     c7a:	82 e9       	ldi	r24, 0x92	; 146
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
			RTOS_SetTask(BlinkFailure, 0, 10);
     c82:	84 e6       	ldi	r24, 0x64	; 100
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	4a e0       	ldi	r20, 0x0A	; 10
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <RTOS_SetTask>
			LedSysEnable = DISABLE;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 0f 01 	sts	0x010F, r24
			break;
     c98:	00 00       	nop
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <ProcASCROW+0x17e>
			if(SoftTimer >= 2500)//время для надатия концевика
			{
				AscrowStateMachine = 2;
				SoftTimer = 0;
			}
			break;
     c9c:	00 00       	nop
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <ProcASCROW+0x17e>
			if(SoftTimer >= 5000)//таймаут для определения сработки концевика
			{
				AscrowStateMachine = 3;
				break;
			}
			break;
     ca0:	00 00       	nop
			

		default:
			break;
	}
}
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <ledoff>:
/**********************************************************************************/
void ledoff(void)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	LED_SYS_OFF;
     cb0:	85 e2       	ldi	r24, 0x25	; 37
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	25 e2       	ldi	r18, 0x25	; 37
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	2f 7d       	andi	r18, 0xDF	; 223
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <BlinkFailure>:
/**********************************************************************************/
void BlinkFailure(void)//мигаем по 3 раза в случае поломки концевика
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	static unsigned char FailureStateMachine = 0;
	static unsigned char CountBlink = 0;

	switch(FailureStateMachine)
     cd0:	80 91 25 01 	lds	r24, 0x0125
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	f9 f0       	breq	.+62     	; 0xd1c <BlinkFailure+0x54>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	91 05       	cpc	r25, r1
     ce2:	1c f4       	brge	.+6      	; 0xcea <BlinkFailure+0x22>
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	49 f0       	breq	.+18     	; 0xcfa <BlinkFailure+0x32>
				FailureStateMachine = 0;
			}
			break;

		default:
			break;
     ce8:	5e c0       	rjmp	.+188    	; 0xda6 <BlinkFailure+0xde>
void BlinkFailure(void)//мигаем по 3 раза в случае поломки концевика
{
	static unsigned char FailureStateMachine = 0;
	static unsigned char CountBlink = 0;

	switch(FailureStateMachine)
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	91 05       	cpc	r25, r1
     cee:	71 f1       	breq	.+92     	; 0xd4c <BlinkFailure+0x84>
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <BlinkFailure+0x30>
     cf6:	47 c0       	rjmp	.+142    	; 0xd86 <BlinkFailure+0xbe>
				FailureStateMachine = 0;
			}
			break;

		default:
			break;
     cf8:	56 c0       	rjmp	.+172    	; 0xda6 <BlinkFailure+0xde>
	static unsigned char CountBlink = 0;

	switch(FailureStateMachine)
	{
		case 0:
			LED_SYS_ON;
     cfa:	85 e2       	ldi	r24, 0x25	; 37
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	25 e2       	ldi	r18, 0x25	; 37
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	f9 01       	movw	r30, r18
     d04:	20 81       	ld	r18, Z
     d06:	20 62       	ori	r18, 0x20	; 32
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18
			SoftTimer = 0;
     d0c:	10 92 1d 01 	sts	0x011D, r1
     d10:	10 92 1c 01 	sts	0x011C, r1
			FailureStateMachine = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 25 01 	sts	0x0125, r24
			break;
     d1a:	45 c0       	rjmp	.+138    	; 0xda6 <BlinkFailure+0xde>

		case 1:
			if(SoftTimer >= 200)
     d1c:	80 91 1c 01 	lds	r24, 0x011C
     d20:	90 91 1d 01 	lds	r25, 0x011D
     d24:	88 3c       	cpi	r24, 0xC8	; 200
     d26:	91 05       	cpc	r25, r1
     d28:	c8 f1       	brcs	.+114    	; 0xd9c <BlinkFailure+0xd4>
			{
				LED_SYS_OFF;
     d2a:	85 e2       	ldi	r24, 0x25	; 37
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	25 e2       	ldi	r18, 0x25	; 37
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	f9 01       	movw	r30, r18
     d34:	20 81       	ld	r18, Z
     d36:	2f 7d       	andi	r18, 0xDF	; 223
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
				SoftTimer = 0;
     d3c:	10 92 1d 01 	sts	0x011D, r1
     d40:	10 92 1c 01 	sts	0x011C, r1
				FailureStateMachine = 2;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 93 25 01 	sts	0x0125, r24
			}
			break;
     d4a:	2d c0       	rjmp	.+90     	; 0xda6 <BlinkFailure+0xde>

		case 2:
			if(SoftTimer >= 200)
     d4c:	80 91 1c 01 	lds	r24, 0x011C
     d50:	90 91 1d 01 	lds	r25, 0x011D
     d54:	88 3c       	cpi	r24, 0xC8	; 200
     d56:	91 05       	cpc	r25, r1
     d58:	18 f1       	brcs	.+70     	; 0xda0 <BlinkFailure+0xd8>
			{
				CountBlink++;
     d5a:	80 91 26 01 	lds	r24, 0x0126
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	80 93 26 01 	sts	0x0126, r24
				if(CountBlink >= 3)
     d64:	80 91 26 01 	lds	r24, 0x0126
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	50 f0       	brcs	.+20     	; 0xd80 <BlinkFailure+0xb8>
				{
					SoftTimer = 0;
     d6c:	10 92 1d 01 	sts	0x011D, r1
     d70:	10 92 1c 01 	sts	0x011C, r1
					FailureStateMachine = 3;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	80 93 25 01 	sts	0x0125, r24
					CountBlink = 0;
     d7a:	10 92 26 01 	sts	0x0126, r1
					break;
     d7e:	13 c0       	rjmp	.+38     	; 0xda6 <BlinkFailure+0xde>
				}
				else
					FailureStateMachine = 0;
     d80:	10 92 25 01 	sts	0x0125, r1
			}
			break;
     d84:	10 c0       	rjmp	.+32     	; 0xda6 <BlinkFailure+0xde>

		case 3:
			if(SoftTimer >= 1000)
     d86:	80 91 1c 01 	lds	r24, 0x011C
     d8a:	90 91 1d 01 	lds	r25, 0x011D
     d8e:	f3 e0       	ldi	r31, 0x03	; 3
     d90:	88 3e       	cpi	r24, 0xE8	; 232
     d92:	9f 07       	cpc	r25, r31
     d94:	38 f0       	brcs	.+14     	; 0xda4 <BlinkFailure+0xdc>
			{
				FailureStateMachine = 0;
     d96:	10 92 25 01 	sts	0x0125, r1
			}
			break;
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <BlinkFailure+0xde>
			{
				LED_SYS_OFF;
				SoftTimer = 0;
				FailureStateMachine = 2;
			}
			break;
     d9c:	00 00       	nop
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <BlinkFailure+0xde>
					break;
				}
				else
					FailureStateMachine = 0;
			}
			break;
     da0:	00 00       	nop
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <BlinkFailure+0xde>
		case 3:
			if(SoftTimer >= 1000)
			{
				FailureStateMachine = 0;
			}
			break;
     da4:	00 00       	nop

		default:
			break;
			
	}
}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <USART1_SendChar>:


/**********************************************************************************/
void USART1_SendChar(unsigned char value)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0))){;}
     db8:	00 00       	nop
     dba:	80 ec       	ldi	r24, 0xC0	; 192
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 72       	andi	r24, 0x20	; 32
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b1 f3       	breq	.-20     	; 0xdba <USART1_SendChar+0xe>
		UDR0 = value;
     dce:	86 ec       	ldi	r24, 0xC6	; 198
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	29 81       	ldd	r18, Y+1	; 0x01
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
}
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <USART1_SendStr>:
[ CTL ][ SIZE ][ CMD ][ DATA ][ CRC ]
                      |_size_|
|_____________crc____________|
*/
void USART1_SendStr(unsigned char *str)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <USART1_SendStr+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <USART1_SendStr+0x8>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char CountChar = 0;
     df0:	19 82       	std	Y+1, r1	; 0x01
	unsigned char NumberOfBytes = ((str[SIZE - 1]) + 3);
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	fc 01       	movw	r30, r24
     dfa:	80 81       	ld	r24, Z
     dfc:	8d 5f       	subi	r24, 0xFD	; 253
     dfe:	8a 83       	std	Y+2, r24	; 0x02

	for(CountChar = 0; CountChar <= NumberOfBytes; CountChar++)
     e00:	19 82       	std	Y+1, r1	; 0x01
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <USART1_SendStr+0x42>
	{ 
		USART1_SendChar(*str++);
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	fc 01       	movw	r30, r24
     e0a:	20 81       	ld	r18, Z
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	82 2f       	mov	r24, r18
     e18:	0e 94 d6 06 	call	0xdac	; 0xdac <USART1_SendChar>
void USART1_SendStr(unsigned char *str)
{
	unsigned char CountChar = 0;
	unsigned char NumberOfBytes = ((str[SIZE - 1]) + 3);

	for(CountChar = 0; CountChar <= NumberOfBytes; CountChar++)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	99 81       	ldd	r25, Y+1	; 0x01
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	89 17       	cp	r24, r25
     e28:	68 f7       	brcc	.-38     	; 0xe04 <USART1_SendStr+0x24>
	{ 
		USART1_SendChar(*str++);
	}
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <MotorInit>:
/**********************************************************************************/
void MotorInit(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	static unsigned char MotorInitStateMachine = 0;

	switch(MotorInitStateMachine)
     e40:	80 91 24 01 	lds	r24, 0x0124
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	91 05       	cpc	r25, r1
     e4c:	31 f1       	breq	.+76     	; 0xe9a <MotorInit+0x62>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	91 05       	cpc	r25, r1
     e52:	e9 f1       	breq	.+122    	; 0xece <MotorInit+0x96>
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	09 f0       	breq	.+2      	; 0xe5a <MotorInit+0x22>
     e58:	7c c0       	rjmp	.+248    	; 0xf52 <MotorInit+0x11a>
	{
		case 0:
			if(PINC & (1<<PC5))					//если концевик в исходном - уходим
     e5a:	86 e2       	ldi	r24, 0x26	; 38
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	80 72       	andi	r24, 0x20	; 32
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	91 f0       	breq	.+36     	; 0xe92 <MotorInit+0x5a>
			{
				MOTOR_STOP;
     e6e:	88 e2       	ldi	r24, 0x28	; 40
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	28 e2       	ldi	r18, 0x28	; 40
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	f9 01       	movw	r30, r18
     e78:	20 81       	ld	r18, Z
     e7a:	28 61       	ori	r18, 0x18	; 24
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
				BusyFlag = FREE;
     e80:	10 92 0d 01 	sts	0x010D, r1
				RTOS_DeleteTask(MotorInit);
     e84:	8c e1       	ldi	r24, 0x1C	; 28
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
				LedSysEnable = ENABLE;
     e8c:	10 92 0f 01 	sts	0x010F, r1
				break;
     e90:	63 c0       	rjmp	.+198    	; 0xf58 <MotorInit+0x120>
			}
			else
			{
				MotorInitStateMachine = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 24 01 	sts	0x0124, r24
				break;
     e98:	5f c0       	rjmp	.+190    	; 0xf58 <MotorInit+0x120>
			}
			break;
		
		case 1:
			SoftTimer = 0;
     e9a:	10 92 1d 01 	sts	0x011D, r1
     e9e:	10 92 1c 01 	sts	0x011C, r1
			MOTOR_LEFT;
     ea2:	88 e2       	ldi	r24, 0x28	; 40
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	28 e2       	ldi	r18, 0x28	; 40
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	20 81       	ld	r18, Z
     eae:	28 61       	ori	r18, 0x18	; 24
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	88 e2       	ldi	r24, 0x28	; 40
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	28 e2       	ldi	r18, 0x28	; 40
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	f9 01       	movw	r30, r18
     ebe:	20 81       	ld	r18, Z
     ec0:	27 7f       	andi	r18, 0xF7	; 247
     ec2:	fc 01       	movw	r30, r24
     ec4:	20 83       	st	Z, r18
			MotorInitStateMachine = 2;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	80 93 24 01 	sts	0x0124, r24
			break;
     ecc:	45 c0       	rjmp	.+138    	; 0xf58 <MotorInit+0x120>

		case 2:
			if(PINC & (1<<PC5))//ждем, когда концевиек отожмется
     ece:	86 e2       	ldi	r24, 0x26	; 38
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	80 72       	andi	r24, 0x20	; 32
     edc:	90 70       	andi	r25, 0x00	; 0
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	a1 f0       	breq	.+40     	; 0xf0a <MotorInit+0xd2>
			{
				MOTOR_STOP;
     ee2:	88 e2       	ldi	r24, 0x28	; 40
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	28 e2       	ldi	r18, 0x28	; 40
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	f9 01       	movw	r30, r18
     eec:	20 81       	ld	r18, Z
     eee:	28 61       	ori	r18, 0x18	; 24
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
				MotorInitStateMachine = 0;
     ef4:	10 92 24 01 	sts	0x0124, r1
				RTOS_DeleteTask(MotorInit);
     ef8:	8c e1       	ldi	r24, 0x1C	; 28
     efa:	97 e0       	ldi	r25, 0x07	; 7
     efc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
				BusyFlag  = FREE;
     f00:	10 92 0d 01 	sts	0x010D, r1
				WorkState = NO_OPERANION;
     f04:	10 92 1b 01 	sts	0x011B, r1
				break;
     f08:	27 c0       	rjmp	.+78     	; 0xf58 <MotorInit+0x120>
			}
			if(SoftTimer >= 5000)//таймаут для определения сработки концевика
     f0a:	80 91 1c 01 	lds	r24, 0x011C
     f0e:	90 91 1d 01 	lds	r25, 0x011D
     f12:	f3 e1       	ldi	r31, 0x13	; 19
     f14:	88 38       	cpi	r24, 0x88	; 136
     f16:	9f 07       	cpc	r25, r31
     f18:	f0 f0       	brcs	.+60     	; 0xf56 <MotorInit+0x11e>
			{
				MOTOR_STOP;
     f1a:	88 e2       	ldi	r24, 0x28	; 40
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	28 e2       	ldi	r18, 0x28	; 40
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	28 61       	ori	r18, 0x18	; 24
     f28:	fc 01       	movw	r30, r24
     f2a:	20 83       	st	Z, r18
				WorkState = GENERAL_FAILURE;//ошибка, если концевик так и не сработал(сломался)
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 1b 01 	sts	0x011B, r24
				RTOS_SetTask(BlinkFailure, 0, 10);
     f32:	84 e6       	ldi	r24, 0x64	; 100
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	4a e0       	ldi	r20, 0x0A	; 10
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <RTOS_SetTask>
				RTOS_DeleteTask(MotorInit);
     f42:	8c e1       	ldi	r24, 0x1C	; 28
     f44:	97 e0       	ldi	r25, 0x07	; 7
     f46:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
				LedSysEnable = DISABLE;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 0f 01 	sts	0x010F, r24
				break;
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <MotorInit+0x120>
			}
			break;			

		default:
			break;
     f52:	00 00       	nop
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <MotorInit+0x120>
				RTOS_SetTask(BlinkFailure, 0, 10);
				RTOS_DeleteTask(MotorInit);
				LedSysEnable = DISABLE;
				break;
			}
			break;			
     f56:	00 00       	nop

		default:
			break;
	}

}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <main>:


/**********************************************************************************/
int main(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	InitPins();
     f66:	0e 94 53 00 	call	0xa6	; 0xa6 <InitPins>
	LED_SYS_OFF;
     f6a:	85 e2       	ldi	r24, 0x25	; 37
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	25 e2       	ldi	r18, 0x25	; 37
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	2f 7d       	andi	r18, 0xDF	; 223
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
	InitUSART();
     f7c:	0e 94 6c 00 	call	0xd8	; 0xd8 <InitUSART>
	RTOS_Init();
     f80:	0e 94 55 08 	call	0x10aa	; 0x10aa <RTOS_Init>
	sei();
     f84:	78 94       	sei
	USART1_SendStr(Version);
     f86:	89 e0       	ldi	r24, 0x09	; 9
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 f0 06 	call	0xde0	; 0xde0 <USART1_SendStr>

	RTOS_SetTask(MotorInit, 0, 10);
     f8e:	8c e1       	ldi	r24, 0x1C	; 28
     f90:	97 e0       	ldi	r25, 0x07	; 7
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	4a e0       	ldi	r20, 0x0A	; 10
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <RTOS_SetTask>
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <main+0x44>
		if(PIND & (1<<PD7))
		{
					DDRC  =  0x00;
   					PORTC = 0x00;
		}
	}
     fa0:	00 00       	nop
	//RTOS_SetTask( rgb_leds_init, 0, 10);

   
	while(1)
	{
		rgb_read_data();
     fa2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rgb_read_data>
			
		if(PIND & (1<<PD6))
     fa6:	89 e2       	ldi	r24, 0x29	; 41
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	fc 01       	movw	r30, r24
     fac:	80 81       	ld	r24, Z
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	80 74       	andi	r24, 0x40	; 64
     fb4:	90 70       	andi	r25, 0x00	; 0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	41 f0       	breq	.+16     	; 0xfca <main+0x6c>
		{
					DDRC  =  0x00;
     fba:	87 e2       	ldi	r24, 0x27	; 39
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	10 82       	st	Z, r1
   					PORTC = 0x00;
     fc2:	88 e2       	ldi	r24, 0x28	; 40
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	fc 01       	movw	r30, r24
     fc8:	10 82       	st	Z, r1
		}
		if(PIND & (1<<PD7))
     fca:	89 e2       	ldi	r24, 0x29	; 41
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	2c f7       	brge	.-54     	; 0xfa0 <main+0x42>
		{
					DDRC  =  0x00;
     fd6:	87 e2       	ldi	r24, 0x27	; 39
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	10 82       	st	Z, r1
   					PORTC = 0x00;
     fde:	88 e2       	ldi	r24, 0x28	; 40
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	fc 01       	movw	r30, r24
     fe4:	10 82       	st	Z, r1
		}
	}
     fe6:	dd cf       	rjmp	.-70     	; 0xfa2 <main+0x44>

00000fe8 <__vector_18>:
[ CTL ][ CHK ][ SIZE ][ CMD ][ DATA ][ CRC ]
                             |_size_|
|________________ crc ______________|
*/
ISR(USART_RX_vect)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	
	BufferForUART[CountReciveByte++] = UDR0;
    1012:	40 91 1a 01 	lds	r20, 0x011A
    1016:	84 2f       	mov	r24, r20
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	26 ec       	ldi	r18, 0xC6	; 198
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	8e 57       	subi	r24, 0x7E	; 126
    1024:	9e 4f       	sbci	r25, 0xFE	; 254
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
    102a:	84 2f       	mov	r24, r20
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 1a 01 	sts	0x011A, r24
	if(BufferForUART[CTL] == 0xF7)
    1032:	80 91 82 01 	lds	r24, 0x0182
    1036:	87 3f       	cpi	r24, 0xF7	; 247
    1038:	19 f5       	brne	.+70     	; 0x1080 <__vector_18+0x98>
	{//                           5 - kol-vo bayt
		if((BufferForUART[SIZE] + 5) == CountReciveByte)//если приняли весь пакет(5 - это клово байт минус data и плюс size т.е. плюс колво data)
    103a:	80 91 84 01 	lds	r24, 0x0184
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	2b 5f       	subi	r18, 0xFB	; 251
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	80 91 1a 01 	lds	r24, 0x011A
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	28 17       	cp	r18, r24
    1052:	39 07       	cpc	r19, r25
    1054:	71 f4       	brne	.+28     	; 0x1072 <__vector_18+0x8a>
		{
			CountReciveByte = 0;
    1056:	10 92 1a 01 	sts	0x011A, r1
			UCSR0B &= ~(1<<RXCIE0);
    105a:	81 ec       	ldi	r24, 0xC1	; 193
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	21 ec       	ldi	r18, 0xC1	; 193
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	f9 01       	movw	r30, r18
    1064:	20 81       	ld	r18, Z
    1066:	2f 77       	andi	r18, 0x7F	; 127
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18
			ReciveNewData();
    106c:	0e 94 8f 04 	call	0x91e	; 0x91e <ReciveNewData>
			return;				
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <__vector_18+0x9c>
		}	
		if(CountReciveByte==31)
    1072:	80 91 1a 01 	lds	r24, 0x011A
    1076:	8f 31       	cpi	r24, 0x1F	; 31
    1078:	29 f4       	brne	.+10     	; 0x1084 <__vector_18+0x9c>
		{
			CountReciveByte = 0;
    107a:	10 92 1a 01 	sts	0x011A, r1
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <__vector_18+0x9c>
		}

	}
	else
	{
		CountReciveByte = 0;
    1080:	10 92 1a 01 	sts	0x011A, r1
		//LED_SYS_ON;
		//RTOS_SetTask(ledoff, 500, 0);
	}
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <RTOS_Init>:

/******************************************************************************************
 * Инициализация РТОС, время тика - 1 мс
 */
inline void RTOS_Init()
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
   TCCR0B       |= (1<<CS01)|(1<<CS00);         // прескалер - 64
    10b2:	85 e4       	ldi	r24, 0x45	; 69
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	25 e4       	ldi	r18, 0x45	; 69
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	f9 01       	movw	r30, r18
    10bc:	20 81       	ld	r18, Z
    10be:	23 60       	ori	r18, 0x03	; 3
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18
   TIFR0         = (1<<TOV0);                   // очищаем флаг прерывания таймера Т0
    10c4:	85 e3       	ldi	r24, 0x35	; 53
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
   TIMSK0       |= (1<<TOIE0);                  // разрешаем прерывание по переполнению
    10ce:	8e e6       	ldi	r24, 0x6E	; 110
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2e e6       	ldi	r18, 0x6E	; 110
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	21 60       	ori	r18, 0x01	; 1
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
   TIMER_COUNTER = TIMER_START;                 // загружаем начальное зн. в счетный регистр
    10e0:	86 e4       	ldi	r24, 0x46	; 70
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	26 e0       	ldi	r18, 0x06	; 6
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
												// для 1ms
   arrayTail = 0;                               // "хвост" в 0
    10ea:	10 92 69 01 	sts	0x0169, r1
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <RTOS_SetTask>:

/******************************************************************************************
 * Добавление задачи в список
 */
void RTOS_SetTask (void (*taskFunc)(void), u16 taskDelay, u16 taskPeriod)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	27 97       	sbiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	9b 83       	std	Y+3, r25	; 0x03
    110a:	8a 83       	std	Y+2, r24	; 0x02
    110c:	7d 83       	std	Y+5, r23	; 0x05
    110e:	6c 83       	std	Y+4, r22	; 0x04
    1110:	5f 83       	std	Y+7, r21	; 0x07
    1112:	4e 83       	std	Y+6, r20	; 0x06
   u08 i;
   
   if(!taskFunc) return;
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <RTOS_SetTask+0x2a>
    111c:	cb c0       	rjmp	.+406    	; 0x12b4 <RTOS_SetTask+0x1c0>
   for(i = 0; i < arrayTail; i++)                     // поиск задачи в текущем списке
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	5e c0       	rjmp	.+188    	; 0x11de <RTOS_SetTask+0xea>
   {
      if(TaskArray[i].pFunc == taskFunc)              // если нашли, то обновляем переменные
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	c9 01       	movw	r24, r18
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	82 1b       	sub	r24, r18
    1138:	93 0b       	sbc	r25, r19
    113a:	86 5d       	subi	r24, 0xD6	; 214
    113c:	9e 4f       	sbci	r25, 0xFE	; 254
    113e:	fc 01       	movw	r30, r24
    1140:	20 81       	ld	r18, Z
    1142:	31 81       	ldd	r19, Z+1	; 0x01
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	09 f0       	breq	.+2      	; 0x1150 <RTOS_SetTask+0x5c>
    114e:	44 c0       	rjmp	.+136    	; 0x11d8 <RTOS_SetTask+0xe4>
      {
         DISABLE_INTERRUPT;
    1150:	8f e5       	ldi	r24, 0x5F	; 95
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	80 93 29 01 	sts	0x0129, r24
    115c:	f8 94       	cli

         TaskArray[i].delay  = taskDelay;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	c9 01       	movw	r24, r18
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 1b       	sub	r24, r18
    1174:	93 0b       	sbc	r25, r19
    1176:	84 5d       	subi	r24, 0xD4	; 212
    1178:	9e 4f       	sbci	r25, 0xFE	; 254
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	3d 81       	ldd	r19, Y+5	; 0x05
    117e:	fc 01       	movw	r30, r24
    1180:	31 83       	std	Z+1, r19	; 0x01
    1182:	20 83       	st	Z, r18
         TaskArray[i].period = taskPeriod;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	c9 01       	movw	r24, r18
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 1b       	sub	r24, r18
    119a:	93 0b       	sbc	r25, r19
    119c:	82 5d       	subi	r24, 0xD2	; 210
    119e:	9e 4f       	sbci	r25, 0xFE	; 254
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	fc 01       	movw	r30, r24
    11a6:	31 83       	std	Z+1, r19	; 0x01
    11a8:	20 83       	st	Z, r18
         TaskArray[i].run    = 0;   
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	c9 01       	movw	r24, r18
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	82 1b       	sub	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	80 5d       	subi	r24, 0xD0	; 208
    11c4:	9e 4f       	sbci	r25, 0xFE	; 254
    11c6:	fc 01       	movw	r30, r24
    11c8:	10 82       	st	Z, r1

         RESTORE_INTERRUPT;
    11ca:	8f e5       	ldi	r24, 0x5F	; 95
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	20 91 29 01 	lds	r18, 0x0129
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
         return;                                      // обновив, выходим
    11d6:	6f c0       	rjmp	.+222    	; 0x12b6 <RTOS_SetTask+0x1c2>
void RTOS_SetTask (void (*taskFunc)(void), u16 taskDelay, u16 taskPeriod)
{
   u08 i;
   
   if(!taskFunc) return;
   for(i = 0; i < arrayTail; i++)                     // поиск задачи в текущем списке
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	80 91 69 01 	lds	r24, 0x0169
    11e2:	99 81       	ldd	r25, Y+1	; 0x01
    11e4:	98 17       	cp	r25, r24
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <RTOS_SetTask+0xf6>
    11e8:	9c cf       	rjmp	.-200    	; 0x1122 <RTOS_SetTask+0x2e>
         RESTORE_INTERRUPT;
         return;                                      // обновив, выходим
      }
   }

   if (arrayTail < MAX_TASKS)                         // если такой задачи в списке нет 
    11ea:	80 91 69 01 	lds	r24, 0x0169
    11ee:	89 30       	cpi	r24, 0x09	; 9
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <RTOS_SetTask+0x100>
    11f2:	61 c0       	rjmp	.+194    	; 0x12b6 <RTOS_SetTask+0x1c2>
   {                                                  // и есть место,то добавляем
      DISABLE_INTERRUPT;
    11f4:	8f e5       	ldi	r24, 0x5F	; 95
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	80 93 29 01 	sts	0x0129, r24
    1200:	f8 94       	cli
      
      TaskArray[arrayTail].pFunc  = taskFunc;
    1202:	80 91 69 01 	lds	r24, 0x0169
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	c9 01       	movw	r24, r18
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	82 1b       	sub	r24, r18
    121a:	93 0b       	sbc	r25, r19
    121c:	86 5d       	subi	r24, 0xD6	; 214
    121e:	9e 4f       	sbci	r25, 0xFE	; 254
    1220:	2a 81       	ldd	r18, Y+2	; 0x02
    1222:	3b 81       	ldd	r19, Y+3	; 0x03
    1224:	fc 01       	movw	r30, r24
    1226:	31 83       	std	Z+1, r19	; 0x01
    1228:	20 83       	st	Z, r18
      TaskArray[arrayTail].delay  = taskDelay;
    122a:	80 91 69 01 	lds	r24, 0x0169
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	c9 01       	movw	r24, r18
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	82 1b       	sub	r24, r18
    1242:	93 0b       	sbc	r25, r19
    1244:	84 5d       	subi	r24, 0xD4	; 212
    1246:	9e 4f       	sbci	r25, 0xFE	; 254
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
      TaskArray[arrayTail].period = taskPeriod;
    1252:	80 91 69 01 	lds	r24, 0x0169
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	c9 01       	movw	r24, r18
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	82 1b       	sub	r24, r18
    126a:	93 0b       	sbc	r25, r19
    126c:	82 5d       	subi	r24, 0xD2	; 210
    126e:	9e 4f       	sbci	r25, 0xFE	; 254
    1270:	2e 81       	ldd	r18, Y+6	; 0x06
    1272:	3f 81       	ldd	r19, Y+7	; 0x07
    1274:	fc 01       	movw	r30, r24
    1276:	31 83       	std	Z+1, r19	; 0x01
    1278:	20 83       	st	Z, r18
      TaskArray[arrayTail].run    = 0;   
    127a:	80 91 69 01 	lds	r24, 0x0169
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	82 1b       	sub	r24, r18
    1292:	93 0b       	sbc	r25, r19
    1294:	80 5d       	subi	r24, 0xD0	; 208
    1296:	9e 4f       	sbci	r25, 0xFE	; 254
    1298:	fc 01       	movw	r30, r24
    129a:	10 82       	st	Z, r1

      arrayTail++;                                    // увеличиваем "хвост"
    129c:	80 91 69 01 	lds	r24, 0x0169
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
    12a2:	80 93 69 01 	sts	0x0169, r24
      RESTORE_INTERRUPT;
    12a6:	8f e5       	ldi	r24, 0x5F	; 95
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	20 91 29 01 	lds	r18, 0x0129
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <RTOS_SetTask+0x1c2>
 */
void RTOS_SetTask (void (*taskFunc)(void), u16 taskDelay, u16 taskPeriod)
{
   u08 i;
   
   if(!taskFunc) return;
    12b4:	00 00       	nop
      TaskArray[arrayTail].run    = 0;   

      arrayTail++;                                    // увеличиваем "хвост"
      RESTORE_INTERRUPT;
   }
}
    12b6:	27 96       	adiw	r28, 0x07	; 7
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <RTOS_DeleteTask>:

/******************************************************************************************
 * Удаление задачи из списка
 */
void RTOS_DeleteTask (void (*taskFunc)(void))
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <RTOS_DeleteTask+0x6>
    12ce:	0f 92       	push	r0
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	9b 83       	std	Y+3, r25	; 0x03
    12d6:	8a 83       	std	Y+2, r24	; 0x02
   u08 i;
   
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	66 c0       	rjmp	.+204    	; 0x13a8 <RTOS_DeleteTask+0xe0>
   {
      if(TaskArray[i].pFunc == taskFunc)              // если задача в списке найдена
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	82 1b       	sub	r24, r18
    12f2:	93 0b       	sbc	r25, r19
    12f4:	86 5d       	subi	r24, 0xD6	; 214
    12f6:	9e 4f       	sbci	r25, 0xFE	; 254
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 81       	ld	r18, Z
    12fc:	31 81       	ldd	r19, Z+1	; 0x01
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	09 f0       	breq	.+2      	; 0x130a <RTOS_DeleteTask+0x42>
    1308:	4c c0       	rjmp	.+152    	; 0x13a2 <RTOS_DeleteTask+0xda>
      {
         
         DISABLE_INTERRUPT;
    130a:	8f e5       	ldi	r24, 0x5F	; 95
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	80 93 29 01 	sts	0x0129, r24
    1316:	f8 94       	cli
         if(i != (arrayTail - 1))                     // переносим последнюю задачу
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	80 91 69 01 	lds	r24, 0x0169
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	71 f1       	breq	.+92     	; 0x138a <RTOS_DeleteTask+0xc2>
         {                                            // на место удаляемой
            TaskArray[i] = TaskArray[arrayTail - 1];
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	48 2f       	mov	r20, r24
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	80 91 69 01 	lds	r24, 0x0169
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9c 01       	movw	r18, r24
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	30 40       	sbci	r19, 0x00	; 0
    1342:	ca 01       	movw	r24, r20
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	84 1b       	sub	r24, r20
    1352:	95 0b       	sbc	r25, r21
    1354:	ac 01       	movw	r20, r24
    1356:	46 5d       	subi	r20, 0xD6	; 214
    1358:	5e 4f       	sbci	r21, 0xFE	; 254
    135a:	c9 01       	movw	r24, r18
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	82 1b       	sub	r24, r18
    136a:	93 0b       	sbc	r25, r19
    136c:	9c 01       	movw	r18, r24
    136e:	26 5d       	subi	r18, 0xD6	; 214
    1370:	3e 4f       	sbci	r19, 0xFE	; 254
    1372:	ca 01       	movw	r24, r20
    1374:	47 e0       	ldi	r20, 0x07	; 7
    1376:	f9 01       	movw	r30, r18
    1378:	00 80       	ld	r0, Z
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	fc 01       	movw	r30, r24
    1380:	00 82       	st	Z, r0
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	41 50       	subi	r20, 0x01	; 1
    1386:	44 23       	and	r20, r20
    1388:	b1 f7       	brne	.-20     	; 0x1376 <RTOS_DeleteTask+0xae>
         }
         arrayTail--;                                 // уменьшаем указатель "хвоста"
    138a:	80 91 69 01 	lds	r24, 0x0169
    138e:	81 50       	subi	r24, 0x01	; 1
    1390:	80 93 69 01 	sts	0x0169, r24
         RESTORE_INTERRUPT;
    1394:	8f e5       	ldi	r24, 0x5F	; 95
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	20 91 29 01 	lds	r18, 0x0129
    139c:	fc 01       	movw	r30, r24
    139e:	20 83       	st	Z, r18
         return;
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <RTOS_DeleteTask+0xec>
 */
void RTOS_DeleteTask (void (*taskFunc)(void))
{
   u08 i;
   
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	80 91 69 01 	lds	r24, 0x0169
    13ac:	99 81       	ldd	r25, Y+1	; 0x01
    13ae:	98 17       	cp	r25, r24
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <RTOS_DeleteTask+0xec>
    13b2:	94 cf       	rjmp	.-216    	; 0x12dc <RTOS_DeleteTask+0x14>
         arrayTail--;                                 // уменьшаем указатель "хвоста"
         RESTORE_INTERRUPT;
         return;
      }
   }
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <RTOS_DispatchTask>:
/******************************************************************************************
 * Диспетчер РТОС, вызывается в main
 */

void RTOS_DispatchTask()
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <RTOS_DispatchTask+0x6>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
   u08 i;
   void (*function) (void);
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	9c c0       	rjmp	.+312    	; 0x1508 <RTOS_DispatchTask+0x148>
   {
      if (TaskArray[i].run == 1)                      // если флаг на выполнение взведен,
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	c9 01       	movw	r24, r18
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 1b       	sub	r24, r18
    13e6:	93 0b       	sbc	r25, r19
    13e8:	80 5d       	subi	r24, 0xD0	; 208
    13ea:	9e 4f       	sbci	r25, 0xFE	; 254
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <RTOS_DispatchTask+0x36>
    13f4:	86 c0       	rjmp	.+268    	; 0x1502 <RTOS_DispatchTask+0x142>
      {                                               // запоминаем задачу, т.к. во
         function = TaskArray[i].pFunc;               // время выполнения может 
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	c9 01       	movw	r24, r18
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	82 1b       	sub	r24, r18
    140c:	93 0b       	sbc	r25, r19
    140e:	86 5d       	subi	r24, 0xD6	; 214
    1410:	9e 4f       	sbci	r25, 0xFE	; 254
    1412:	fc 01       	movw	r30, r24
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	9b 83       	std	Y+3, r25	; 0x03
    141a:	8a 83       	std	Y+2, r24	; 0x02
                                                      // измениться индекс
         if(TaskArray[i].period == 0)                 
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	c9 01       	movw	r24, r18
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	82 1b       	sub	r24, r18
    1432:	93 0b       	sbc	r25, r19
    1434:	82 5d       	subi	r24, 0xD2	; 210
    1436:	9e 4f       	sbci	r25, 0xFE	; 254
    1438:	fc 01       	movw	r30, r24
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	a1 f4       	brne	.+40     	; 0x146a <RTOS_DispatchTask+0xaa>
         {                                            // если период равен 0
            RTOS_DeleteTask(TaskArray[i].pFunc);      // удаляем задачу из списка,
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	c9 01       	movw	r24, r18
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	82 1b       	sub	r24, r18
    1458:	93 0b       	sbc	r25, r19
    145a:	86 5d       	subi	r24, 0xD6	; 214
    145c:	9e 4f       	sbci	r25, 0xFE	; 254
    145e:	fc 01       	movw	r30, r24
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	0e 94 64 09 	call	0x12c8	; 0x12c8 <RTOS_DeleteTask>
    1468:	48 c0       	rjmp	.+144    	; 0x14fa <RTOS_DispatchTask+0x13a>
            
         }
         else
         {
            TaskArray[i].run = 0;                     // иначе снимаем флаг запуска
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	c9 01       	movw	r24, r18
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	82 1b       	sub	r24, r18
    1480:	93 0b       	sbc	r25, r19
    1482:	80 5d       	subi	r24, 0xD0	; 208
    1484:	9e 4f       	sbci	r25, 0xFE	; 254
    1486:	fc 01       	movw	r30, r24
    1488:	10 82       	st	Z, r1
            if(!TaskArray[i].delay)                   // если задача не изменила задержку
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	c9 01       	movw	r24, r18
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	82 1b       	sub	r24, r18
    14a0:	93 0b       	sbc	r25, r19
    14a2:	84 5d       	subi	r24, 0xD4	; 212
    14a4:	9e 4f       	sbci	r25, 0xFE	; 254
    14a6:	fc 01       	movw	r30, r24
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	29 f5       	brne	.+74     	; 0x14fa <RTOS_DispatchTask+0x13a>
            {                                         // задаем ее
               TaskArray[i].delay = TaskArray[i].period-1; 
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	48 2f       	mov	r20, r24
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	ca 01       	movw	r24, r20
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	84 1b       	sub	r24, r20
    14cc:	95 0b       	sbc	r25, r21
    14ce:	82 5d       	subi	r24, 0xD2	; 210
    14d0:	9e 4f       	sbci	r25, 0xFE	; 254
    14d2:	fc 01       	movw	r30, r24
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	ac 01       	movw	r20, r24
    14da:	41 50       	subi	r20, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	c9 01       	movw	r24, r18
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	82 1b       	sub	r24, r18
    14ee:	93 0b       	sbc	r25, r19
    14f0:	84 5d       	subi	r24, 0xD4	; 212
    14f2:	9e 4f       	sbci	r25, 0xFE	; 254
    14f4:	fc 01       	movw	r30, r24
    14f6:	51 83       	std	Z+1, r21	; 0x01
    14f8:	40 83       	st	Z, r20
            }                                         // задача для себя может сделать паузу  
         }
         (*function)();                               // выполняем задачу
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	fc 01       	movw	r30, r24
    1500:	09 95       	icall

void RTOS_DispatchTask()
{
   u08 i;
   void (*function) (void);
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	80 91 69 01 	lds	r24, 0x0169
    150c:	99 81       	ldd	r25, Y+1	; 0x01
    150e:	98 17       	cp	r25, r24
    1510:	08 f4       	brcc	.+2      	; 0x1514 <RTOS_DispatchTask+0x154>
    1512:	5e cf       	rjmp	.-324    	; 0x13d0 <RTOS_DispatchTask+0x10>
            }                                         // задача для себя может сделать паузу  
         }
         (*function)();                               // выполняем задачу
      }
   }
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <__vector_16>:

/******************************************************************************************
 * Таймерная служба РТОС (прерывание аппаратного таймера)
 */
ISR(RTOS_ISR) 
{
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
   u08 i;

   TIMER_COUNTER = TIMER_START;                       // задаем начальное значение таймера
    1544:	86 e4       	ldi	r24, 0x46	; 70
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	26 e0       	ldi	r18, 0x06	; 6
    154a:	fc 01       	movw	r30, r24
    154c:	20 83       	st	Z, r18
   
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    154e:	19 82       	std	Y+1, r1	; 0x01
    1550:	4b c0       	rjmp	.+150    	; 0x15e8 <__vector_16+0xc8>
   {
      if  (TaskArray[i].delay == 0)                   // если время до выполнения истекло
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	c9 01       	movw	r24, r18
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	82 1b       	sub	r24, r18
    1568:	93 0b       	sbc	r25, r19
    156a:	84 5d       	subi	r24, 0xD4	; 212
    156c:	9e 4f       	sbci	r25, 0xFE	; 254
    156e:	fc 01       	movw	r30, r24
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	91 f4       	brne	.+36     	; 0x159c <__vector_16+0x7c>
           TaskArray[i].run = 1;                      // взводим флаг запуска,
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	c9 01       	movw	r24, r18
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	80 5d       	subi	r24, 0xD0	; 208
    1592:	9e 4f       	sbci	r25, 0xFE	; 254
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
    159a:	23 c0       	rjmp	.+70     	; 0x15e2 <__vector_16+0xc2>
      else TaskArray[i].delay--;                      // иначе уменьшаем время
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 01       	movw	r18, r24
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	28 1b       	sub	r18, r24
    15b2:	39 0b       	sbc	r19, r25
    15b4:	24 5d       	subi	r18, 0xD4	; 212
    15b6:	3e 4f       	sbci	r19, 0xFE	; 254
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	31 81       	ldd	r19, Z+1	; 0x01
    15be:	a9 01       	movw	r20, r18
    15c0:	41 50       	subi	r20, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
    15c4:	9c 01       	movw	r18, r24
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	28 1b       	sub	r18, r24
    15d4:	39 0b       	sbc	r19, r25
    15d6:	c9 01       	movw	r24, r18
    15d8:	84 5d       	subi	r24, 0xD4	; 212
    15da:	9e 4f       	sbci	r25, 0xFE	; 254
    15dc:	fc 01       	movw	r30, r24
    15de:	51 83       	std	Z+1, r21	; 0x01
    15e0:	40 83       	st	Z, r20
{
   u08 i;

   TIMER_COUNTER = TIMER_START;                       // задаем начальное значение таймера
   
   for (i=0; i<arrayTail; i++)                        // проходим по списку задач
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	80 91 69 01 	lds	r24, 0x0169
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	98 17       	cp	r25, r24
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <__vector_16+0xd4>
    15f2:	af cf       	rjmp	.-162    	; 0x1552 <__vector_16+0x32>
   {
      if  (TaskArray[i].delay == 0)                   // если время до выполнения истекло
           TaskArray[i].run = 1;                      // взводим флаг запуска,
      else TaskArray[i].delay--;                      // иначе уменьшаем время
   }
   SoftTimer++;
    15f4:	80 91 1c 01 	lds	r24, 0x011C
    15f8:	90 91 1d 01 	lds	r25, 0x011D
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	90 93 1d 01 	sts	0x011D, r25
    1602:	80 93 1c 01 	sts	0x011C, r24
   CountForSysBlink++;
    1606:	80 91 28 01 	lds	r24, 0x0128
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 28 01 	sts	0x0128, r24
   if(LedSysEnable != DISABLE)
    1610:	80 91 0f 01 	lds	r24, 0x010F
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	09 f1       	breq	.+66     	; 0x165a <__vector_16+0x13a>
   {
		switch(CountForSysBlink)
    1618:	80 91 28 01 	lds	r24, 0x0128
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	84 36       	cpi	r24, 0x64	; 100
    1622:	91 05       	cpc	r25, r1
    1624:	21 f0       	breq	.+8      	; 0x162e <__vector_16+0x10e>
    1626:	88 3c       	cpi	r24, 0xC8	; 200
    1628:	91 05       	cpc	r25, r1
    162a:	59 f0       	breq	.+22     	; 0x1642 <__vector_16+0x122>
				LED_SYS_OFF;
				CountForSysBlink = 0;
				break;
		
			default:
				break;
    162c:	16 c0       	rjmp	.+44     	; 0x165a <__vector_16+0x13a>
   if(LedSysEnable != DISABLE)
   {
		switch(CountForSysBlink)
		{
			case 100:
				LED_SYS_ON;
    162e:	85 e2       	ldi	r24, 0x25	; 37
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	25 e2       	ldi	r18, 0x25	; 37
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	f9 01       	movw	r30, r18
    1638:	20 81       	ld	r18, Z
    163a:	20 62       	ori	r18, 0x20	; 32
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18
				break;
    1640:	0c c0       	rjmp	.+24     	; 0x165a <__vector_16+0x13a>
			case 200:
				LED_SYS_OFF;
    1642:	85 e2       	ldi	r24, 0x25	; 37
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	25 e2       	ldi	r18, 0x25	; 37
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	2f 7d       	andi	r18, 0xDF	; 223
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
				CountForSysBlink = 0;
    1654:	10 92 28 01 	sts	0x0128, r1
				break;
    1658:	00 00       	nop
		
			default:
				break;
		}
	}	
}
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <ws2812_setleds+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <ws2812_setleds+0x8>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	7c 83       	std	Y+4, r23	; 0x04
    168c:	6b 83       	std	Y+3, r22	; 0x03
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	b9 01       	movw	r22, r18
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <ws2812_setleds_pin>
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <ws2812_setleds_pin>:

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	6d 97       	sbiw	r28, 0x1d	; 29
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	9a 8f       	std	Y+26, r25	; 0x1a
    16c6:	89 8f       	std	Y+25, r24	; 0x19
    16c8:	7c 8f       	std	Y+28, r23	; 0x1c
    16ca:	6b 8f       	std	Y+27, r22	; 0x1b
    16cc:	4d 8f       	std	Y+29, r20	; 0x1d
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    16ce:	89 8d       	ldd	r24, Y+25	; 0x19
    16d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16d2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    16d4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    16d6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16d8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    16da:	42 0f       	add	r20, r18
    16dc:	53 1f       	adc	r21, r19
    16de:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16e0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    16e2:	24 0f       	add	r18, r20
    16e4:	35 1f       	adc	r19, r21
    16e6:	b9 01       	movw	r22, r18
    16e8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    16ea:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ws2812_sendarray_mask>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a6 e9       	ldi	r26, 0x96	; 150
    16f4:	b3 e4       	ldi	r27, 0x43	; 67
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	ab 83       	std	Y+3, r26	; 0x03
    16fc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    16fe:	69 81       	ldd	r22, Y+1	; 0x01
    1700:	7a 81       	ldd	r23, Y+2	; 0x02
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	2b ea       	ldi	r18, 0xAB	; 171
    1708:	3a ea       	ldi	r19, 0xAA	; 170
    170a:	4a ea       	ldi	r20, 0xAA	; 170
    170c:	50 e4       	ldi	r21, 0x40	; 64
    170e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8d 83       	std	Y+5, r24	; 0x05
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	af 83       	std	Y+7, r26	; 0x07
    171c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    171e:	11 e0       	ldi	r17, 0x01	; 1
    1720:	6d 81       	ldd	r22, Y+5	; 0x05
    1722:	7e 81       	ldd	r23, Y+6	; 0x06
    1724:	8f 81       	ldd	r24, Y+7	; 0x07
    1726:	98 85       	ldd	r25, Y+8	; 0x08
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	0c f0       	brlt	.+2      	; 0x173a <ws2812_setleds_pin+0x8e>
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	11 23       	and	r17, r17
    173c:	19 f0       	breq	.+6      	; 0x1744 <ws2812_setleds_pin+0x98>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 87       	std	Y+9, r24	; 0x09
    1742:	a3 c0       	rjmp	.+326    	; 0x188a <ws2812_setleds_pin+0x1de>
	else if (__tmp > 255)
    1744:	11 e0       	ldi	r17, 0x01	; 1
    1746:	6d 81       	ldd	r22, Y+5	; 0x05
    1748:	7e 81       	ldd	r23, Y+6	; 0x06
    174a:	8f 81       	ldd	r24, Y+7	; 0x07
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	53 e4       	ldi	r21, 0x43	; 67
    1756:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	0c f0       	brlt	.+2      	; 0x1760 <ws2812_setleds_pin+0xb4>
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	11 23       	and	r17, r17
    1762:	09 f4       	brne	.+2      	; 0x1766 <ws2812_setleds_pin+0xba>
    1764:	89 c0       	rjmp	.+274    	; 0x1878 <ws2812_setleds_pin+0x1cc>
	{
		_delay_ms(__us / 1000.0);
    1766:	69 81       	ldd	r22, Y+1	; 0x01
    1768:	7a 81       	ldd	r23, Y+2	; 0x02
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8a 87       	std	Y+10, r24	; 0x0a
    1780:	9b 87       	std	Y+11, r25	; 0x0b
    1782:	ac 87       	std	Y+12, r26	; 0x0c
    1784:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6a 85       	ldd	r22, Y+10	; 0x0a
    1788:	7b 85       	ldd	r23, Y+11	; 0x0b
    178a:	8c 85       	ldd	r24, Y+12	; 0x0c
    178c:	9d 85       	ldd	r25, Y+13	; 0x0d
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	55 e4       	ldi	r21, 0x45	; 69
    1796:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8e 87       	std	Y+14, r24	; 0x0e
    17a0:	9f 87       	std	Y+15, r25	; 0x0f
    17a2:	a8 8b       	std	Y+16, r26	; 0x10
    17a4:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	6e 85       	ldd	r22, Y+14	; 0x0e
    17aa:	7f 85       	ldd	r23, Y+15	; 0x0f
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	99 89       	ldd	r25, Y+17	; 0x11
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <ws2812_setleds_pin+0x116>
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	11 23       	and	r17, r17
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <ws2812_setleds_pin+0x124>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9b 8b       	std	Y+19, r25	; 0x13
    17cc:	8a 8b       	std	Y+18, r24	; 0x12
    17ce:	46 c0       	rjmp	.+140    	; 0x185c <ws2812_setleds_pin+0x1b0>
	else if (__tmp > 65535)
    17d0:	11 e0       	ldi	r17, 0x01	; 1
    17d2:	6e 85       	ldd	r22, Y+14	; 0x0e
    17d4:	7f 85       	ldd	r23, Y+15	; 0x0f
    17d6:	88 89       	ldd	r24, Y+16	; 0x10
    17d8:	99 89       	ldd	r25, Y+17	; 0x11
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	0c f0       	brlt	.+2      	; 0x17ec <ws2812_setleds_pin+0x140>
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	11 23       	and	r17, r17
    17ee:	61 f1       	breq	.+88     	; 0x1848 <ws2812_setleds_pin+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    17f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    17f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	51 e4       	ldi	r21, 0x41	; 65
    1800:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9b 8b       	std	Y+19, r25	; 0x13
    1816:	8a 8b       	std	Y+18, r24	; 0x12
    1818:	12 c0       	rjmp	.+36     	; 0x183e <ws2812_setleds_pin+0x192>
    181a:	80 e9       	ldi	r24, 0x90	; 144
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	9d 8b       	std	Y+21, r25	; 0x15
    1820:	8c 8b       	std	Y+20, r24	; 0x14
    1822:	8c 89       	ldd	r24, Y+20	; 0x14
    1824:	9d 89       	ldd	r25, Y+21	; 0x15
    1826:	8c 01       	movw	r16, r24
    1828:	c8 01       	movw	r24, r16
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <ws2812_setleds_pin+0x17e>
    182e:	8c 01       	movw	r16, r24
    1830:	1d 8b       	std	Y+21, r17	; 0x15
    1832:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8a 89       	ldd	r24, Y+18	; 0x12
    1836:	9b 89       	ldd	r25, Y+19	; 0x13
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9b 8b       	std	Y+19, r25	; 0x13
    183c:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8a 89       	ldd	r24, Y+18	; 0x12
    1840:	9b 89       	ldd	r25, Y+19	; 0x13
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	51 f7       	brne	.-44     	; 0x181a <ws2812_setleds_pin+0x16e>
    1846:	28 c0       	rjmp	.+80     	; 0x1898 <ws2812_setleds_pin+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6e 85       	ldd	r22, Y+14	; 0x0e
    184a:	7f 85       	ldd	r23, Y+15	; 0x0f
    184c:	88 89       	ldd	r24, Y+16	; 0x10
    184e:	99 89       	ldd	r25, Y+17	; 0x11
    1850:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9b 8b       	std	Y+19, r25	; 0x13
    185a:	8a 8b       	std	Y+18, r24	; 0x12
    185c:	8a 89       	ldd	r24, Y+18	; 0x12
    185e:	9b 89       	ldd	r25, Y+19	; 0x13
    1860:	9f 8b       	std	Y+23, r25	; 0x17
    1862:	8e 8b       	std	Y+22, r24	; 0x16
    1864:	8e 89       	ldd	r24, Y+22	; 0x16
    1866:	9f 89       	ldd	r25, Y+23	; 0x17
    1868:	8c 01       	movw	r16, r24
    186a:	c8 01       	movw	r24, r16
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <ws2812_setleds_pin+0x1c0>
    1870:	8c 01       	movw	r16, r24
    1872:	1f 8b       	std	Y+23, r17	; 0x17
    1874:	0e 8b       	std	Y+22, r16	; 0x16
    1876:	10 c0       	rjmp	.+32     	; 0x1898 <ws2812_setleds_pin+0x1ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1878:	6d 81       	ldd	r22, Y+5	; 0x05
    187a:	7e 81       	ldd	r23, Y+6	; 0x06
    187c:	8f 81       	ldd	r24, Y+7	; 0x07
    187e:	98 85       	ldd	r25, Y+8	; 0x08
    1880:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	89 87       	std	Y+9, r24	; 0x09
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    188e:	88 8d       	ldd	r24, Y+24	; 0x18
    1890:	18 2f       	mov	r17, r24
    1892:	1a 95       	dec	r17
    1894:	f1 f7       	brne	.-4      	; 0x1892 <ws2812_setleds_pin+0x1e6>
    1896:	18 8f       	std	Y+24, r17	; 0x18
  _delay_us(ws2812_resettime);
}
    1898:	6d 96       	adiw	r28, 0x1d	; 29
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <ws2812_setleds_rgbw>:

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	6c 97       	sbiw	r28, 0x1c	; 28
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	9a 8f       	std	Y+26, r25	; 0x1a
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	7c 8f       	std	Y+28, r23	; 0x1c
    18cc:	6b 8f       	std	Y+27, r22	; 0x1b
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
    18ce:	89 8d       	ldd	r24, Y+25	; 0x19
    18d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18d2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    18d4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	22 0f       	add	r18, r18
    18dc:	33 1f       	adc	r19, r19
    18de:	b9 01       	movw	r22, r18
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ws2812_sendarray_mask>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a6 e9       	ldi	r26, 0x96	; 150
    18ec:	b3 e4       	ldi	r27, 0x43	; 67
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	ab 83       	std	Y+3, r26	; 0x03
    18f4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    18f6:	69 81       	ldd	r22, Y+1	; 0x01
    18f8:	7a 81       	ldd	r23, Y+2	; 0x02
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	2b ea       	ldi	r18, 0xAB	; 171
    1900:	3a ea       	ldi	r19, 0xAA	; 170
    1902:	4a ea       	ldi	r20, 0xAA	; 170
    1904:	50 e4       	ldi	r21, 0x40	; 64
    1906:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	af 83       	std	Y+7, r26	; 0x07
    1914:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1916:	11 e0       	ldi	r17, 0x01	; 1
    1918:	6d 81       	ldd	r22, Y+5	; 0x05
    191a:	7e 81       	ldd	r23, Y+6	; 0x06
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	0c f0       	brlt	.+2      	; 0x1932 <ws2812_setleds_rgbw+0x84>
    1930:	10 e0       	ldi	r17, 0x00	; 0
    1932:	11 23       	and	r17, r17
    1934:	19 f0       	breq	.+6      	; 0x193c <ws2812_setleds_rgbw+0x8e>
		__ticks = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 87       	std	Y+9, r24	; 0x09
    193a:	a3 c0       	rjmp	.+326    	; 0x1a82 <ws2812_setleds_rgbw+0x1d4>
	else if (__tmp > 255)
    193c:	11 e0       	ldi	r17, 0x01	; 1
    193e:	6d 81       	ldd	r22, Y+5	; 0x05
    1940:	7e 81       	ldd	r23, Y+6	; 0x06
    1942:	8f 81       	ldd	r24, Y+7	; 0x07
    1944:	98 85       	ldd	r25, Y+8	; 0x08
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	53 e4       	ldi	r21, 0x43	; 67
    194e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	0c f0       	brlt	.+2      	; 0x1958 <ws2812_setleds_rgbw+0xaa>
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	11 23       	and	r17, r17
    195a:	09 f4       	brne	.+2      	; 0x195e <ws2812_setleds_rgbw+0xb0>
    195c:	89 c0       	rjmp	.+274    	; 0x1a70 <ws2812_setleds_rgbw+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    195e:	69 81       	ldd	r22, Y+1	; 0x01
    1960:	7a 81       	ldd	r23, Y+2	; 0x02
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a e7       	ldi	r20, 0x7A	; 122
    196c:	54 e4       	ldi	r21, 0x44	; 68
    196e:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8a 87       	std	Y+10, r24	; 0x0a
    1978:	9b 87       	std	Y+11, r25	; 0x0b
    197a:	ac 87       	std	Y+12, r26	; 0x0c
    197c:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1980:	7b 85       	ldd	r23, Y+11	; 0x0b
    1982:	8c 85       	ldd	r24, Y+12	; 0x0c
    1984:	9d 85       	ldd	r25, Y+13	; 0x0d
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	55 e4       	ldi	r21, 0x45	; 69
    198e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8e 87       	std	Y+14, r24	; 0x0e
    1998:	9f 87       	std	Y+15, r25	; 0x0f
    199a:	a8 8b       	std	Y+16, r26	; 0x10
    199c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    199e:	11 e0       	ldi	r17, 0x01	; 1
    19a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    19a2:	7f 85       	ldd	r23, Y+15	; 0x0f
    19a4:	88 89       	ldd	r24, Y+16	; 0x10
    19a6:	99 89       	ldd	r25, Y+17	; 0x11
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	0c f0       	brlt	.+2      	; 0x19ba <ws2812_setleds_rgbw+0x10c>
    19b8:	10 e0       	ldi	r17, 0x00	; 0
    19ba:	11 23       	and	r17, r17
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <ws2812_setleds_rgbw+0x11a>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9b 8b       	std	Y+19, r25	; 0x13
    19c4:	8a 8b       	std	Y+18, r24	; 0x12
    19c6:	46 c0       	rjmp	.+140    	; 0x1a54 <ws2812_setleds_rgbw+0x1a6>
	else if (__tmp > 65535)
    19c8:	11 e0       	ldi	r17, 0x01	; 1
    19ca:	6e 85       	ldd	r22, Y+14	; 0x0e
    19cc:	7f 85       	ldd	r23, Y+15	; 0x0f
    19ce:	88 89       	ldd	r24, Y+16	; 0x10
    19d0:	99 89       	ldd	r25, Y+17	; 0x11
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <ws2812_setleds_rgbw+0x136>
    19e2:	10 e0       	ldi	r17, 0x00	; 0
    19e4:	11 23       	and	r17, r17
    19e6:	61 f1       	breq	.+88     	; 0x1a40 <ws2812_setleds_rgbw+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    19ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    19ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9b 8b       	std	Y+19, r25	; 0x13
    1a0e:	8a 8b       	std	Y+18, r24	; 0x12
    1a10:	12 c0       	rjmp	.+36     	; 0x1a36 <ws2812_setleds_rgbw+0x188>
    1a12:	80 e9       	ldi	r24, 0x90	; 144
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	9d 8b       	std	Y+21, r25	; 0x15
    1a18:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a1c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a1e:	8c 01       	movw	r16, r24
    1a20:	c8 01       	movw	r24, r16
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <ws2812_setleds_rgbw+0x174>
    1a26:	8c 01       	movw	r16, r24
    1a28:	1d 8b       	std	Y+21, r17	; 0x15
    1a2a:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9b 8b       	std	Y+19, r25	; 0x13
    1a34:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	8a 89       	ldd	r24, Y+18	; 0x12
    1a38:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	51 f7       	brne	.-44     	; 0x1a12 <ws2812_setleds_rgbw+0x164>
    1a3e:	28 c0       	rjmp	.+80     	; 0x1a90 <ws2812_setleds_rgbw+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a42:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a44:	88 89       	ldd	r24, Y+16	; 0x10
    1a46:	99 89       	ldd	r25, Y+17	; 0x11
    1a48:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9b 8b       	std	Y+19, r25	; 0x13
    1a52:	8a 8b       	std	Y+18, r24	; 0x12
    1a54:	8a 89       	ldd	r24, Y+18	; 0x12
    1a56:	9b 89       	ldd	r25, Y+19	; 0x13
    1a58:	9f 8b       	std	Y+23, r25	; 0x17
    1a5a:	8e 8b       	std	Y+22, r24	; 0x16
    1a5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a5e:	9f 89       	ldd	r25, Y+23	; 0x17
    1a60:	8c 01       	movw	r16, r24
    1a62:	c8 01       	movw	r24, r16
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <ws2812_setleds_rgbw+0x1b6>
    1a68:	8c 01       	movw	r16, r24
    1a6a:	1f 8b       	std	Y+23, r17	; 0x17
    1a6c:	0e 8b       	std	Y+22, r16	; 0x16
    1a6e:	10 c0       	rjmp	.+32     	; 0x1a90 <ws2812_setleds_rgbw+0x1e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a70:	6d 81       	ldd	r22, Y+5	; 0x05
    1a72:	7e 81       	ldd	r23, Y+6	; 0x06
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	89 87       	std	Y+9, r24	; 0x09
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a86:	88 8d       	ldd	r24, Y+24	; 0x18
    1a88:	18 2f       	mov	r17, r24
    1a8a:	1a 95       	dec	r17
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <ws2812_setleds_rgbw+0x1dc>
    1a8e:	18 8f       	std	Y+24, r17	; 0x18
  _delay_us(ws2812_resettime);
}
    1a90:	6c 96       	adiw	r28, 0x1c	; 28
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	08 95       	ret

00001aa6 <ws2812_sendarray>:

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <ws2812_sendarray+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <ws2812_sendarray+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	7c 83       	std	Y+4, r23	; 0x04
    1ab8:	6b 83       	std	Y+3, r22	; 0x03
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	b9 01       	movw	r22, r18
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ws2812_sendarray_mask>
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <ws2812_sendarray_mask>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	29 97       	sbiw	r28, 0x09	; 9
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	78 87       	std	Y+8, r23	; 0x08
    1af4:	6f 83       	std	Y+7, r22	; 0x07
    1af6:	49 87       	std	Y+9, r20	; 0x09
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1af8:	84 e2       	ldi	r24, 0x24	; 36
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	24 e2       	ldi	r18, 0x24	; 36
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	f9 01       	movw	r30, r18
    1b02:	30 81       	ld	r19, Z
    1b04:	29 85       	ldd	r18, Y+9	; 0x09
    1b06:	23 2b       	or	r18, r19
    1b08:	fc 01       	movw	r30, r24
    1b0a:	20 83       	st	Z, r18
  
  masklo	=~maskhi&ws2812_PORTREG;
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	28 2f       	mov	r18, r24
    1b10:	20 95       	com	r18
    1b12:	85 e2       	ldi	r24, 0x25	; 37
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 23       	and	r24, r18
    1b1c:	89 83       	std	Y+1, r24	; 0x01
  maskhi |=        ws2812_PORTREG;
    1b1e:	85 e2       	ldi	r24, 0x25	; 37
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	fc 01       	movw	r30, r24
    1b24:	80 81       	ld	r24, Z
    1b26:	99 85       	ldd	r25, Y+9	; 0x09
    1b28:	89 2b       	or	r24, r25
    1b2a:	89 87       	std	Y+9, r24	; 0x09
  
  sreg_prev=SREG;
    1b2c:	8f e5       	ldi	r24, 0x5F	; 95
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	fc 01       	movw	r30, r24
    1b32:	80 81       	ld	r24, Z
    1b34:	8a 83       	std	Y+2, r24	; 0x02
  cli();  
    1b36:	f8 94       	cli

  while (datlen--) {
    1b38:	1d c0       	rjmp	.+58     	; 0x1b74 <loop484+0x1e>
    curbyte=*data++;
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	fc 01       	movw	r30, r24
    1b40:	80 81       	ld	r24, Z
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    
    asm volatile(
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	99 85       	ldd	r25, Y+9	; 0x09
    1b52:	29 81       	ldd	r18, Y+1	; 0x01
    1b54:	18 e0       	ldi	r17, 0x08	; 8

00001b56 <loop484>:
    1b56:	95 b9       	out	0x05, r25	; 5
    1b58:	00 00       	nop
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <loop484+0x6>
    1b5c:	87 ff       	sbrs	r24, 7
    1b5e:	25 b9       	out	0x05, r18	; 5
    1b60:	88 0f       	add	r24, r24
    1b62:	00 00       	nop
    1b64:	00 c0       	rjmp	.+0      	; 0x1b66 <loop484+0x10>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <loop484+0x12>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <loop484+0x14>
    1b6a:	25 b9       	out	0x05, r18	; 5
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <loop484+0x18>
    1b6e:	1a 95       	dec	r17
    1b70:	91 f7       	brne	.-28     	; 0x1b56 <loop484>
    1b72:	1c 83       	std	Y+4, r17	; 0x04
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    1b74:	21 e0       	ldi	r18, 0x01	; 1
    1b76:	8f 81       	ldd	r24, Y+7	; 0x07
    1b78:	98 85       	ldd	r25, Y+8	; 0x08
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <loop484+0x2a>
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
    1b82:	98 85       	ldd	r25, Y+8	; 0x08
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	98 87       	std	Y+8, r25	; 0x08
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	22 23       	and	r18, r18
    1b8c:	b1 f6       	brne	.-84     	; 0x1b3a <ws2812_sendarray_mask+0x62>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    1b8e:	8f e5       	ldi	r24, 0x5F	; 95
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	2a 81       	ldd	r18, Y+2	; 0x02
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
}
    1b98:	29 96       	adiw	r28, 0x09	; 9
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	1f 91       	pop	r17
    1baa:	08 95       	ret

00001bac <__fixunssfsi>:
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	7b 01       	movw	r14, r22
    1bb6:	8c 01       	movw	r16, r24
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	5f e4       	ldi	r21, 0x4F	; 79
    1bc0:	0e 94 82 11 	call	0x2304	; 0x2304 <__gesf2>
    1bc4:	87 fd       	sbrc	r24, 7
    1bc6:	11 c0       	rjmp	.+34     	; 0x1bea <__fixunssfsi+0x3e>
    1bc8:	c8 01       	movw	r24, r16
    1bca:	b7 01       	movw	r22, r14
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	5f e4       	ldi	r21, 0x4F	; 79
    1bd4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__subsf3>
    1bd8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
    1bdc:	9b 01       	movw	r18, r22
    1bde:	ac 01       	movw	r20, r24
    1be0:	20 50       	subi	r18, 0x00	; 0
    1be2:	30 40       	sbci	r19, 0x00	; 0
    1be4:	40 40       	sbci	r20, 0x00	; 0
    1be6:	50 48       	sbci	r21, 0x80	; 128
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <__fixunssfsi+0x4a>
    1bea:	c8 01       	movw	r24, r16
    1bec:	b7 01       	movw	r22, r14
    1bee:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	b9 01       	movw	r22, r18
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	08 95       	ret

00001c04 <_fpadd_parts>:
    1c04:	a0 e0       	ldi	r26, 0x00	; 0
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e0       	ldi	r30, 0x08	; 8
    1c0a:	fe e0       	ldi	r31, 0x0E	; 14
    1c0c:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x8>
    1c10:	fc 01       	movw	r30, r24
    1c12:	ea 01       	movw	r28, r20
    1c14:	80 81       	ld	r24, Z
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <_fpadd_parts+0x18>
    1c1a:	38 c1       	rjmp	.+624    	; 0x1e8c <_fpadd_parts+0x288>
    1c1c:	db 01       	movw	r26, r22
    1c1e:	9c 91       	ld	r25, X
    1c20:	92 30       	cpi	r25, 0x02	; 2
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <_fpadd_parts+0x22>
    1c24:	30 c1       	rjmp	.+608    	; 0x1e86 <_fpadd_parts+0x282>
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	59 f4       	brne	.+22     	; 0x1c40 <_fpadd_parts+0x3c>
    1c2a:	94 30       	cpi	r25, 0x04	; 4
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <_fpadd_parts+0x2c>
    1c2e:	2e c1       	rjmp	.+604    	; 0x1e8c <_fpadd_parts+0x288>
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	8c 91       	ld	r24, X
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	98 17       	cp	r25, r24
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <_fpadd_parts+0x3a>
    1c3c:	21 c1       	rjmp	.+578    	; 0x1e80 <_fpadd_parts+0x27c>
    1c3e:	26 c1       	rjmp	.+588    	; 0x1e8c <_fpadd_parts+0x288>
    1c40:	94 30       	cpi	r25, 0x04	; 4
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <_fpadd_parts+0x42>
    1c44:	20 c1       	rjmp	.+576    	; 0x1e86 <_fpadd_parts+0x282>
    1c46:	92 30       	cpi	r25, 0x02	; 2
    1c48:	b1 f4       	brne	.+44     	; 0x1c76 <_fpadd_parts+0x72>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <_fpadd_parts+0x4c>
    1c4e:	1e c1       	rjmp	.+572    	; 0x1e8c <_fpadd_parts+0x288>
    1c50:	ca 01       	movw	r24, r20
    1c52:	af 01       	movw	r20, r30
    1c54:	28 e0       	ldi	r18, 0x08	; 8
    1c56:	da 01       	movw	r26, r20
    1c58:	0d 90       	ld	r0, X+
    1c5a:	ad 01       	movw	r20, r26
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	0d 92       	st	X+, r0
    1c60:	cd 01       	movw	r24, r26
    1c62:	21 50       	subi	r18, 0x01	; 1
    1c64:	c1 f7       	brne	.-16     	; 0x1c56 <_fpadd_parts+0x52>
    1c66:	db 01       	movw	r26, r22
    1c68:	11 96       	adiw	r26, 0x01	; 1
    1c6a:	8c 91       	ld	r24, X
    1c6c:	11 97       	sbiw	r26, 0x01	; 1
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	89 23       	and	r24, r25
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	0a c1       	rjmp	.+532    	; 0x1e8a <_fpadd_parts+0x286>
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <_fpadd_parts+0x78>
    1c7a:	05 c1       	rjmp	.+522    	; 0x1e86 <_fpadd_parts+0x282>
    1c7c:	c2 80       	ldd	r12, Z+2	; 0x02
    1c7e:	d3 80       	ldd	r13, Z+3	; 0x03
    1c80:	db 01       	movw	r26, r22
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	6d 90       	ld	r6, X+
    1c86:	7c 90       	ld	r7, X
    1c88:	13 97       	sbiw	r26, 0x03	; 3
    1c8a:	24 81       	ldd	r18, Z+4	; 0x04
    1c8c:	35 81       	ldd	r19, Z+5	; 0x05
    1c8e:	46 81       	ldd	r20, Z+6	; 0x06
    1c90:	57 81       	ldd	r21, Z+7	; 0x07
    1c92:	14 96       	adiw	r26, 0x04	; 4
    1c94:	ed 90       	ld	r14, X+
    1c96:	fd 90       	ld	r15, X+
    1c98:	0d 91       	ld	r16, X+
    1c9a:	1c 91       	ld	r17, X
    1c9c:	17 97       	sbiw	r26, 0x07	; 7
    1c9e:	c6 01       	movw	r24, r12
    1ca0:	86 19       	sub	r24, r6
    1ca2:	97 09       	sbc	r25, r7
    1ca4:	5c 01       	movw	r10, r24
    1ca6:	97 ff       	sbrs	r25, 7
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <_fpadd_parts+0xae>
    1caa:	aa 24       	eor	r10, r10
    1cac:	bb 24       	eor	r11, r11
    1cae:	a8 1a       	sub	r10, r24
    1cb0:	b9 0a       	sbc	r11, r25
    1cb2:	b0 e2       	ldi	r27, 0x20	; 32
    1cb4:	ab 16       	cp	r10, r27
    1cb6:	b1 04       	cpc	r11, r1
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <_fpadd_parts+0xb8>
    1cba:	61 c0       	rjmp	.+194    	; 0x1d7e <_fpadd_parts+0x17a>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	19 06       	cpc	r1, r25
    1cc0:	6c f5       	brge	.+90     	; 0x1d1c <_fpadd_parts+0x118>
    1cc2:	37 01       	movw	r6, r14
    1cc4:	48 01       	movw	r8, r16
    1cc6:	0a 2c       	mov	r0, r10
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <_fpadd_parts+0xce>
    1cca:	96 94       	lsr	r9
    1ccc:	87 94       	ror	r8
    1cce:	77 94       	ror	r7
    1cd0:	67 94       	ror	r6
    1cd2:	0a 94       	dec	r0
    1cd4:	d2 f7       	brpl	.-12     	; 0x1cca <_fpadd_parts+0xc6>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	0a 2c       	mov	r0, r10
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <_fpadd_parts+0xe6>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	0a 94       	dec	r0
    1cec:	d2 f7       	brpl	.-12     	; 0x1ce2 <_fpadd_parts+0xde>
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	a1 09       	sbc	r26, r1
    1cf2:	b1 09       	sbc	r27, r1
    1cf4:	8e 21       	and	r24, r14
    1cf6:	9f 21       	and	r25, r15
    1cf8:	a0 23       	and	r26, r16
    1cfa:	b1 23       	and	r27, r17
    1cfc:	ee 24       	eor	r14, r14
    1cfe:	ff 24       	eor	r15, r15
    1d00:	87 01       	movw	r16, r14
    1d02:	e3 94       	inc	r14
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	a1 05       	cpc	r26, r1
    1d08:	b1 05       	cpc	r27, r1
    1d0a:	19 f4       	brne	.+6      	; 0x1d12 <_fpadd_parts+0x10e>
    1d0c:	ee 24       	eor	r14, r14
    1d0e:	ff 24       	eor	r15, r15
    1d10:	87 01       	movw	r16, r14
    1d12:	e6 28       	or	r14, r6
    1d14:	f7 28       	or	r15, r7
    1d16:	08 29       	or	r16, r8
    1d18:	19 29       	or	r17, r9
    1d1a:	3c c0       	rjmp	.+120    	; 0x1d94 <_fpadd_parts+0x190>
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	d1 f1       	breq	.+116    	; 0x1d94 <_fpadd_parts+0x190>
    1d20:	ca 0c       	add	r12, r10
    1d22:	db 1c       	adc	r13, r11
    1d24:	39 01       	movw	r6, r18
    1d26:	4a 01       	movw	r8, r20
    1d28:	0a 2c       	mov	r0, r10
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <_fpadd_parts+0x130>
    1d2c:	96 94       	lsr	r9
    1d2e:	87 94       	ror	r8
    1d30:	77 94       	ror	r7
    1d32:	67 94       	ror	r6
    1d34:	0a 94       	dec	r0
    1d36:	d2 f7       	brpl	.-12     	; 0x1d2c <_fpadd_parts+0x128>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	0a 2c       	mov	r0, r10
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <_fpadd_parts+0x148>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	aa 1f       	adc	r26, r26
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	0a 94       	dec	r0
    1d4e:	d2 f7       	brpl	.-12     	; 0x1d44 <_fpadd_parts+0x140>
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	a1 09       	sbc	r26, r1
    1d54:	b1 09       	sbc	r27, r1
    1d56:	82 23       	and	r24, r18
    1d58:	93 23       	and	r25, r19
    1d5a:	a4 23       	and	r26, r20
    1d5c:	b5 23       	and	r27, r21
    1d5e:	21 e0       	ldi	r18, 0x01	; 1
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	a1 05       	cpc	r26, r1
    1d6a:	b1 05       	cpc	r27, r1
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <_fpadd_parts+0x170>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	a9 01       	movw	r20, r18
    1d74:	26 29       	or	r18, r6
    1d76:	37 29       	or	r19, r7
    1d78:	48 29       	or	r20, r8
    1d7a:	59 29       	or	r21, r9
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <_fpadd_parts+0x190>
    1d7e:	6c 14       	cp	r6, r12
    1d80:	7d 04       	cpc	r7, r13
    1d82:	24 f4       	brge	.+8      	; 0x1d8c <_fpadd_parts+0x188>
    1d84:	ee 24       	eor	r14, r14
    1d86:	ff 24       	eor	r15, r15
    1d88:	87 01       	movw	r16, r14
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <_fpadd_parts+0x190>
    1d8c:	63 01       	movw	r12, r6
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	a9 01       	movw	r20, r18
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	fb 01       	movw	r30, r22
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	89 17       	cp	r24, r25
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <_fpadd_parts+0x19c>
    1d9e:	45 c0       	rjmp	.+138    	; 0x1e2a <_fpadd_parts+0x226>
    1da0:	88 23       	and	r24, r24
    1da2:	49 f0       	breq	.+18     	; 0x1db6 <_fpadd_parts+0x1b2>
    1da4:	d8 01       	movw	r26, r16
    1da6:	c7 01       	movw	r24, r14
    1da8:	82 1b       	sub	r24, r18
    1daa:	93 0b       	sbc	r25, r19
    1dac:	a4 0b       	sbc	r26, r20
    1dae:	b5 0b       	sbc	r27, r21
    1db0:	9c 01       	movw	r18, r24
    1db2:	ad 01       	movw	r20, r26
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <_fpadd_parts+0x1ba>
    1db6:	2e 19       	sub	r18, r14
    1db8:	3f 09       	sbc	r19, r15
    1dba:	40 0b       	sbc	r20, r16
    1dbc:	51 0b       	sbc	r21, r17
    1dbe:	57 fd       	sbrc	r21, 7
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <_fpadd_parts+0x1c6>
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	db 82       	std	Y+3, r13	; 0x03
    1dc6:	ca 82       	std	Y+2, r12	; 0x02
    1dc8:	0b c0       	rjmp	.+22     	; 0x1de0 <_fpadd_parts+0x1dc>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	db 82       	std	Y+3, r13	; 0x03
    1dd0:	ca 82       	std	Y+2, r12	; 0x02
    1dd2:	50 95       	com	r21
    1dd4:	40 95       	com	r20
    1dd6:	30 95       	com	r19
    1dd8:	21 95       	neg	r18
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	4f 4f       	sbci	r20, 0xFF	; 255
    1dde:	5f 4f       	sbci	r21, 0xFF	; 255
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	3d 83       	std	Y+5, r19	; 0x05
    1de4:	4e 83       	std	Y+6, r20	; 0x06
    1de6:	5f 83       	std	Y+7, r21	; 0x07
    1de8:	0d c0       	rjmp	.+26     	; 0x1e04 <_fpadd_parts+0x200>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	aa 1f       	adc	r26, r26
    1df0:	bb 1f       	adc	r27, r27
    1df2:	8c 83       	std	Y+4, r24	; 0x04
    1df4:	9d 83       	std	Y+5, r25	; 0x05
    1df6:	ae 83       	std	Y+6, r26	; 0x06
    1df8:	bf 83       	std	Y+7, r27	; 0x07
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9b 83       	std	Y+3, r25	; 0x03
    1e02:	8a 83       	std	Y+2, r24	; 0x02
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	ae 81       	ldd	r26, Y+6	; 0x06
    1e0a:	bf 81       	ldd	r27, Y+7	; 0x07
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	ad 01       	movw	r20, r26
    1e10:	21 50       	subi	r18, 0x01	; 1
    1e12:	30 40       	sbci	r19, 0x00	; 0
    1e14:	40 40       	sbci	r20, 0x00	; 0
    1e16:	50 40       	sbci	r21, 0x00	; 0
    1e18:	2f 3f       	cpi	r18, 0xFF	; 255
    1e1a:	ef ef       	ldi	r30, 0xFF	; 255
    1e1c:	3e 07       	cpc	r19, r30
    1e1e:	ef ef       	ldi	r30, 0xFF	; 255
    1e20:	4e 07       	cpc	r20, r30
    1e22:	ef e3       	ldi	r30, 0x3F	; 63
    1e24:	5e 07       	cpc	r21, r30
    1e26:	08 f3       	brcs	.-62     	; 0x1dea <_fpadd_parts+0x1e6>
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <_fpadd_parts+0x23c>
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	db 82       	std	Y+3, r13	; 0x03
    1e2e:	ca 82       	std	Y+2, r12	; 0x02
    1e30:	2e 0d       	add	r18, r14
    1e32:	3f 1d       	adc	r19, r15
    1e34:	40 1f       	adc	r20, r16
    1e36:	51 1f       	adc	r21, r17
    1e38:	2c 83       	std	Y+4, r18	; 0x04
    1e3a:	3d 83       	std	Y+5, r19	; 0x05
    1e3c:	4e 83       	std	Y+6, r20	; 0x06
    1e3e:	5f 83       	std	Y+7, r21	; 0x07
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	88 83       	st	Y, r24
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	4e 81       	ldd	r20, Y+6	; 0x06
    1e4a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e4c:	57 ff       	sbrs	r21, 7
    1e4e:	1d c0       	rjmp	.+58     	; 0x1e8a <_fpadd_parts+0x286>
    1e50:	da 01       	movw	r26, r20
    1e52:	c9 01       	movw	r24, r18
    1e54:	81 70       	andi	r24, 0x01	; 1
    1e56:	90 70       	andi	r25, 0x00	; 0
    1e58:	a0 70       	andi	r26, 0x00	; 0
    1e5a:	b0 70       	andi	r27, 0x00	; 0
    1e5c:	56 95       	lsr	r21
    1e5e:	47 95       	ror	r20
    1e60:	37 95       	ror	r19
    1e62:	27 95       	ror	r18
    1e64:	82 2b       	or	r24, r18
    1e66:	93 2b       	or	r25, r19
    1e68:	a4 2b       	or	r26, r20
    1e6a:	b5 2b       	or	r27, r21
    1e6c:	8c 83       	std	Y+4, r24	; 0x04
    1e6e:	9d 83       	std	Y+5, r25	; 0x05
    1e70:	ae 83       	std	Y+6, r26	; 0x06
    1e72:	bf 83       	std	Y+7, r27	; 0x07
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	9b 83       	std	Y+3, r25	; 0x03
    1e7c:	8a 83       	std	Y+2, r24	; 0x02
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <_fpadd_parts+0x286>
    1e80:	e2 e1       	ldi	r30, 0x12	; 18
    1e82:	f1 e0       	ldi	r31, 0x01	; 1
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <_fpadd_parts+0x288>
    1e86:	fb 01       	movw	r30, r22
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <_fpadd_parts+0x288>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	cf 01       	movw	r24, r30
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	ee e0       	ldi	r30, 0x0E	; 14
    1e94:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x8>

00001e98 <__addsf3>:
    1e98:	a0 e2       	ldi	r26, 0x20	; 32
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e2 e5       	ldi	r30, 0x52	; 82
    1e9e:	ff e0       	ldi	r31, 0x0F	; 15
    1ea0:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x18>
    1ea4:	69 83       	std	Y+1, r22	; 0x01
    1ea6:	7a 83       	std	Y+2, r23	; 0x02
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	2d 83       	std	Y+5, r18	; 0x05
    1eae:	3e 83       	std	Y+6, r19	; 0x06
    1eb0:	4f 83       	std	Y+7, r20	; 0x07
    1eb2:	58 87       	std	Y+8, r21	; 0x08
    1eb4:	89 e0       	ldi	r24, 0x09	; 9
    1eb6:	e8 2e       	mov	r14, r24
    1eb8:	f1 2c       	mov	r15, r1
    1eba:	ec 0e       	add	r14, r28
    1ebc:	fd 1e       	adc	r15, r29
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1ec8:	8e 01       	movw	r16, r28
    1eca:	0f 5e       	subi	r16, 0xEF	; 239
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	ce 01       	movw	r24, r28
    1ed0:	05 96       	adiw	r24, 0x05	; 5
    1ed2:	b8 01       	movw	r22, r16
    1ed4:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1ed8:	c7 01       	movw	r24, r14
    1eda:	b8 01       	movw	r22, r16
    1edc:	ae 01       	movw	r20, r28
    1ede:	47 5e       	subi	r20, 0xE7	; 231
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1ee6:	0e 94 34 12 	call	0x2468	; 0x2468 <__pack_f>
    1eea:	a0 96       	adiw	r28, 0x20	; 32
    1eec:	e6 e0       	ldi	r30, 0x06	; 6
    1eee:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

00001ef2 <__subsf3>:
    1ef2:	a0 e2       	ldi	r26, 0x20	; 32
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ef e7       	ldi	r30, 0x7F	; 127
    1ef8:	ff e0       	ldi	r31, 0x0F	; 15
    1efa:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x18>
    1efe:	69 83       	std	Y+1, r22	; 0x01
    1f00:	7a 83       	std	Y+2, r23	; 0x02
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	2d 83       	std	Y+5, r18	; 0x05
    1f08:	3e 83       	std	Y+6, r19	; 0x06
    1f0a:	4f 83       	std	Y+7, r20	; 0x07
    1f0c:	58 87       	std	Y+8, r21	; 0x08
    1f0e:	8e 01       	movw	r16, r28
    1f10:	07 5f       	subi	r16, 0xF7	; 247
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	ce 01       	movw	r24, r28
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	b8 01       	movw	r22, r16
    1f1a:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1f1e:	91 e1       	ldi	r25, 0x11	; 17
    1f20:	e9 2e       	mov	r14, r25
    1f22:	f1 2c       	mov	r15, r1
    1f24:	ec 0e       	add	r14, r28
    1f26:	fd 1e       	adc	r15, r29
    1f28:	ce 01       	movw	r24, r28
    1f2a:	05 96       	adiw	r24, 0x05	; 5
    1f2c:	b7 01       	movw	r22, r14
    1f2e:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1f32:	8a 89       	ldd	r24, Y+18	; 0x12
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	89 27       	eor	r24, r25
    1f38:	8a 8b       	std	Y+18, r24	; 0x12
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	ae 01       	movw	r20, r28
    1f40:	47 5e       	subi	r20, 0xE7	; 231
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1f48:	0e 94 34 12 	call	0x2468	; 0x2468 <__pack_f>
    1f4c:	a0 96       	adiw	r28, 0x20	; 32
    1f4e:	e6 e0       	ldi	r30, 0x06	; 6
    1f50:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

00001f54 <__mulsf3>:
    1f54:	a0 e2       	ldi	r26, 0x20	; 32
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__prologue_saves__>
    1f60:	69 83       	std	Y+1, r22	; 0x01
    1f62:	7a 83       	std	Y+2, r23	; 0x02
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	2d 83       	std	Y+5, r18	; 0x05
    1f6a:	3e 83       	std	Y+6, r19	; 0x06
    1f6c:	4f 83       	std	Y+7, r20	; 0x07
    1f6e:	58 87       	std	Y+8, r21	; 0x08
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	be 01       	movw	r22, r28
    1f76:	67 5f       	subi	r22, 0xF7	; 247
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1f7e:	ce 01       	movw	r24, r28
    1f80:	05 96       	adiw	r24, 0x05	; 5
    1f82:	be 01       	movw	r22, r28
    1f84:	6f 5e       	subi	r22, 0xEF	; 239
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    1f8c:	99 85       	ldd	r25, Y+9	; 0x09
    1f8e:	92 30       	cpi	r25, 0x02	; 2
    1f90:	78 f0       	brcs	.+30     	; 0x1fb0 <__mulsf3+0x5c>
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	82 30       	cpi	r24, 0x02	; 2
    1f96:	c0 f0       	brcs	.+48     	; 0x1fc8 <__mulsf3+0x74>
    1f98:	94 30       	cpi	r25, 0x04	; 4
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2 <__mulsf3+0x4e>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	41 f4       	brne	.+16     	; 0x1fb0 <__mulsf3+0x5c>
    1fa0:	cb c0       	rjmp	.+406    	; 0x2138 <__mulsf3+0x1e4>
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	19 f4       	brne	.+6      	; 0x1fac <__mulsf3+0x58>
    1fa6:	92 30       	cpi	r25, 0x02	; 2
    1fa8:	79 f4       	brne	.+30     	; 0x1fc8 <__mulsf3+0x74>
    1faa:	c6 c0       	rjmp	.+396    	; 0x2138 <__mulsf3+0x1e4>
    1fac:	92 30       	cpi	r25, 0x02	; 2
    1fae:	51 f4       	brne	.+20     	; 0x1fc4 <__mulsf3+0x70>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb6:	29 17       	cp	r18, r25
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <__mulsf3+0x68>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	8a 87       	std	Y+10, r24	; 0x0a
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	09 96       	adiw	r24, 0x09	; 9
    1fc2:	bc c0       	rjmp	.+376    	; 0x213c <__mulsf3+0x1e8>
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	51 f4       	brne	.+20     	; 0x1fdc <__mulsf3+0x88>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fce:	29 17       	cp	r18, r25
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <__mulsf3+0x80>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	8a 8b       	std	Y+18, r24	; 0x12
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	41 96       	adiw	r24, 0x11	; 17
    1fda:	b0 c0       	rjmp	.+352    	; 0x213c <__mulsf3+0x1e8>
    1fdc:	6d 84       	ldd	r6, Y+13	; 0x0d
    1fde:	7e 84       	ldd	r7, Y+14	; 0x0e
    1fe0:	8f 84       	ldd	r8, Y+15	; 0x0f
    1fe2:	98 88       	ldd	r9, Y+16	; 0x10
    1fe4:	ed 88       	ldd	r14, Y+21	; 0x15
    1fe6:	fe 88       	ldd	r15, Y+22	; 0x16
    1fe8:	0f 89       	ldd	r16, Y+23	; 0x17
    1fea:	18 8d       	ldd	r17, Y+24	; 0x18
    1fec:	e0 e2       	ldi	r30, 0x20	; 32
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	aa 24       	eor	r10, r10
    1ff8:	bb 24       	eor	r11, r11
    1ffa:	65 01       	movw	r12, r10
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	a9 01       	movw	r20, r18
    2002:	b3 01       	movw	r22, r6
    2004:	61 70       	andi	r22, 0x01	; 1
    2006:	70 70       	andi	r23, 0x00	; 0
    2008:	61 15       	cp	r22, r1
    200a:	71 05       	cpc	r23, r1
    200c:	d1 f0       	breq	.+52     	; 0x2042 <__mulsf3+0xee>
    200e:	2e 0d       	add	r18, r14
    2010:	3f 1d       	adc	r19, r15
    2012:	40 1f       	adc	r20, r16
    2014:	51 1f       	adc	r21, r17
    2016:	15 01       	movw	r2, r10
    2018:	26 01       	movw	r4, r12
    201a:	28 0e       	add	r2, r24
    201c:	39 1e       	adc	r3, r25
    201e:	4a 1e       	adc	r4, r26
    2020:	5b 1e       	adc	r5, r27
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	2e 15       	cp	r18, r14
    202c:	3f 05       	cpc	r19, r15
    202e:	40 07       	cpc	r20, r16
    2030:	51 07       	cpc	r21, r17
    2032:	18 f0       	brcs	.+6      	; 0x203a <__mulsf3+0xe6>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	dc 01       	movw	r26, r24
    203a:	82 0d       	add	r24, r2
    203c:	93 1d       	adc	r25, r3
    203e:	a4 1d       	adc	r26, r4
    2040:	b5 1d       	adc	r27, r5
    2042:	aa 0c       	add	r10, r10
    2044:	bb 1c       	adc	r11, r11
    2046:	cc 1c       	adc	r12, r12
    2048:	dd 1c       	adc	r13, r13
    204a:	17 ff       	sbrs	r17, 7
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <__mulsf3+0x10c>
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	26 2e       	mov	r2, r22
    2052:	31 2c       	mov	r3, r1
    2054:	41 2c       	mov	r4, r1
    2056:	51 2c       	mov	r5, r1
    2058:	a2 28       	or	r10, r2
    205a:	b3 28       	or	r11, r3
    205c:	c4 28       	or	r12, r4
    205e:	d5 28       	or	r13, r5
    2060:	31 97       	sbiw	r30, 0x01	; 1
    2062:	49 f0       	breq	.+18     	; 0x2076 <__mulsf3+0x122>
    2064:	ee 0c       	add	r14, r14
    2066:	ff 1c       	adc	r15, r15
    2068:	00 1f       	adc	r16, r16
    206a:	11 1f       	adc	r17, r17
    206c:	96 94       	lsr	r9
    206e:	87 94       	ror	r8
    2070:	77 94       	ror	r7
    2072:	67 94       	ror	r6
    2074:	c6 cf       	rjmp	.-116    	; 0x2002 <__mulsf3+0xae>
    2076:	6b 89       	ldd	r22, Y+19	; 0x13
    2078:	7c 89       	ldd	r23, Y+20	; 0x14
    207a:	eb 85       	ldd	r30, Y+11	; 0x0b
    207c:	fc 85       	ldd	r31, Y+12	; 0x0c
    207e:	6e 0f       	add	r22, r30
    2080:	7f 1f       	adc	r23, r31
    2082:	6e 5f       	subi	r22, 0xFE	; 254
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	7c 8f       	std	Y+28, r23	; 0x1c
    2088:	6b 8f       	std	Y+27, r22	; 0x1b
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	ea 85       	ldd	r30, Y+10	; 0x0a
    208e:	7a 89       	ldd	r23, Y+18	; 0x12
    2090:	e7 17       	cp	r30, r23
    2092:	09 f4       	brne	.+2      	; 0x2096 <__mulsf3+0x142>
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	6a 8f       	std	Y+26, r22	; 0x1a
    2098:	6b 8d       	ldd	r22, Y+27	; 0x1b
    209a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    209c:	10 c0       	rjmp	.+32     	; 0x20be <__mulsf3+0x16a>
    209e:	fc 01       	movw	r30, r24
    20a0:	e1 70       	andi	r30, 0x01	; 1
    20a2:	f0 70       	andi	r31, 0x00	; 0
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <__mulsf3+0x15e>
    20a8:	56 95       	lsr	r21
    20aa:	47 95       	ror	r20
    20ac:	37 95       	ror	r19
    20ae:	27 95       	ror	r18
    20b0:	50 68       	ori	r21, 0x80	; 128
    20b2:	b6 95       	lsr	r27
    20b4:	a7 95       	ror	r26
    20b6:	97 95       	ror	r25
    20b8:	87 95       	ror	r24
    20ba:	6f 5f       	subi	r22, 0xFF	; 255
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	b7 fd       	sbrc	r27, 7
    20c0:	ee cf       	rjmp	.-36     	; 0x209e <__mulsf3+0x14a>
    20c2:	0c c0       	rjmp	.+24     	; 0x20dc <__mulsf3+0x188>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	aa 1f       	adc	r26, r26
    20ca:	bb 1f       	adc	r27, r27
    20cc:	57 fd       	sbrc	r21, 7
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	44 1f       	adc	r20, r20
    20d6:	55 1f       	adc	r21, r21
    20d8:	61 50       	subi	r22, 0x01	; 1
    20da:	70 40       	sbci	r23, 0x00	; 0
    20dc:	80 30       	cpi	r24, 0x00	; 0
    20de:	e0 e0       	ldi	r30, 0x00	; 0
    20e0:	9e 07       	cpc	r25, r30
    20e2:	e0 e0       	ldi	r30, 0x00	; 0
    20e4:	ae 07       	cpc	r26, r30
    20e6:	e0 e4       	ldi	r30, 0x40	; 64
    20e8:	be 07       	cpc	r27, r30
    20ea:	60 f3       	brcs	.-40     	; 0x20c4 <__mulsf3+0x170>
    20ec:	6b 8f       	std	Y+27, r22	; 0x1b
    20ee:	7c 8f       	std	Y+28, r23	; 0x1c
    20f0:	6f e7       	ldi	r22, 0x7F	; 127
    20f2:	e6 2e       	mov	r14, r22
    20f4:	f1 2c       	mov	r15, r1
    20f6:	01 2d       	mov	r16, r1
    20f8:	11 2d       	mov	r17, r1
    20fa:	e8 22       	and	r14, r24
    20fc:	f9 22       	and	r15, r25
    20fe:	0a 23       	and	r16, r26
    2100:	1b 23       	and	r17, r27
    2102:	60 e4       	ldi	r22, 0x40	; 64
    2104:	e6 16       	cp	r14, r22
    2106:	f1 04       	cpc	r15, r1
    2108:	01 05       	cpc	r16, r1
    210a:	11 05       	cpc	r17, r1
    210c:	61 f4       	brne	.+24     	; 0x2126 <__mulsf3+0x1d2>
    210e:	87 fd       	sbrc	r24, 7
    2110:	0a c0       	rjmp	.+20     	; 0x2126 <__mulsf3+0x1d2>
    2112:	21 15       	cp	r18, r1
    2114:	31 05       	cpc	r19, r1
    2116:	41 05       	cpc	r20, r1
    2118:	51 05       	cpc	r21, r1
    211a:	29 f0       	breq	.+10     	; 0x2126 <__mulsf3+0x1d2>
    211c:	80 5c       	subi	r24, 0xC0	; 192
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	af 4f       	sbci	r26, 0xFF	; 255
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	80 78       	andi	r24, 0x80	; 128
    2126:	8d 8f       	std	Y+29, r24	; 0x1d
    2128:	9e 8f       	std	Y+30, r25	; 0x1e
    212a:	af 8f       	std	Y+31, r26	; 0x1f
    212c:	b8 a3       	std	Y+32, r27	; 0x20
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	89 8f       	std	Y+25, r24	; 0x19
    2132:	ce 01       	movw	r24, r28
    2134:	49 96       	adiw	r24, 0x19	; 25
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__mulsf3+0x1e8>
    2138:	82 e1       	ldi	r24, 0x12	; 18
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	0e 94 34 12 	call	0x2468	; 0x2468 <__pack_f>
    2140:	a0 96       	adiw	r28, 0x20	; 32
    2142:	e2 e1       	ldi	r30, 0x12	; 18
    2144:	0c 94 07 14 	jmp	0x280e	; 0x280e <__epilogue_restores__>

00002148 <__divsf3>:
    2148:	a8 e1       	ldi	r26, 0x18	; 24
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ea ea       	ldi	r30, 0xAA	; 170
    214e:	f0 e1       	ldi	r31, 0x10	; 16
    2150:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x10>
    2154:	69 83       	std	Y+1, r22	; 0x01
    2156:	7a 83       	std	Y+2, r23	; 0x02
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	2d 83       	std	Y+5, r18	; 0x05
    215e:	3e 83       	std	Y+6, r19	; 0x06
    2160:	4f 83       	std	Y+7, r20	; 0x07
    2162:	58 87       	std	Y+8, r21	; 0x08
    2164:	8e 01       	movw	r16, r28
    2166:	07 5f       	subi	r16, 0xF7	; 247
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	ce 01       	movw	r24, r28
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	b8 01       	movw	r22, r16
    2170:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    2174:	81 e1       	ldi	r24, 0x11	; 17
    2176:	e8 2e       	mov	r14, r24
    2178:	f1 2c       	mov	r15, r1
    217a:	ec 0e       	add	r14, r28
    217c:	fd 1e       	adc	r15, r29
    217e:	ce 01       	movw	r24, r28
    2180:	05 96       	adiw	r24, 0x05	; 5
    2182:	b7 01       	movw	r22, r14
    2184:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    2188:	99 85       	ldd	r25, Y+9	; 0x09
    218a:	92 30       	cpi	r25, 0x02	; 2
    218c:	08 f4       	brcc	.+2      	; 0x2190 <__divsf3+0x48>
    218e:	83 c0       	rjmp	.+262    	; 0x2296 <__divsf3+0x14e>
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	08 f4       	brcc	.+2      	; 0x2198 <__divsf3+0x50>
    2196:	7b c0       	rjmp	.+246    	; 0x228e <__divsf3+0x146>
    2198:	2a 85       	ldd	r18, Y+10	; 0x0a
    219a:	3a 89       	ldd	r19, Y+18	; 0x12
    219c:	23 27       	eor	r18, r19
    219e:	2a 87       	std	Y+10, r18	; 0x0a
    21a0:	94 30       	cpi	r25, 0x04	; 4
    21a2:	11 f0       	breq	.+4      	; 0x21a8 <__divsf3+0x60>
    21a4:	92 30       	cpi	r25, 0x02	; 2
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <__divsf3+0x68>
    21a8:	98 17       	cp	r25, r24
    21aa:	09 f0       	breq	.+2      	; 0x21ae <__divsf3+0x66>
    21ac:	6c c0       	rjmp	.+216    	; 0x2286 <__divsf3+0x13e>
    21ae:	71 c0       	rjmp	.+226    	; 0x2292 <__divsf3+0x14a>
    21b0:	84 30       	cpi	r24, 0x04	; 4
    21b2:	39 f4       	brne	.+14     	; 0x21c2 <__divsf3+0x7a>
    21b4:	1d 86       	std	Y+13, r1	; 0x0d
    21b6:	1e 86       	std	Y+14, r1	; 0x0e
    21b8:	1f 86       	std	Y+15, r1	; 0x0f
    21ba:	18 8a       	std	Y+16, r1	; 0x10
    21bc:	1c 86       	std	Y+12, r1	; 0x0c
    21be:	1b 86       	std	Y+11, r1	; 0x0b
    21c0:	6a c0       	rjmp	.+212    	; 0x2296 <__divsf3+0x14e>
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	19 f4       	brne	.+6      	; 0x21cc <__divsf3+0x84>
    21c6:	84 e0       	ldi	r24, 0x04	; 4
    21c8:	89 87       	std	Y+9, r24	; 0x09
    21ca:	65 c0       	rjmp	.+202    	; 0x2296 <__divsf3+0x14e>
    21cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    21d0:	2b 89       	ldd	r18, Y+19	; 0x13
    21d2:	3c 89       	ldd	r19, Y+20	; 0x14
    21d4:	82 1b       	sub	r24, r18
    21d6:	93 0b       	sbc	r25, r19
    21d8:	9c 87       	std	Y+12, r25	; 0x0c
    21da:	8b 87       	std	Y+11, r24	; 0x0b
    21dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    21de:	3e 85       	ldd	r19, Y+14	; 0x0e
    21e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    21e2:	58 89       	ldd	r21, Y+16	; 0x10
    21e4:	ed 88       	ldd	r14, Y+21	; 0x15
    21e6:	fe 88       	ldd	r15, Y+22	; 0x16
    21e8:	0f 89       	ldd	r16, Y+23	; 0x17
    21ea:	18 8d       	ldd	r17, Y+24	; 0x18
    21ec:	2e 15       	cp	r18, r14
    21ee:	3f 05       	cpc	r19, r15
    21f0:	40 07       	cpc	r20, r16
    21f2:	51 07       	cpc	r21, r17
    21f4:	38 f4       	brcc	.+14     	; 0x2204 <__divsf3+0xbc>
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	44 1f       	adc	r20, r20
    21fc:	55 1f       	adc	r21, r21
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9c 87       	std	Y+12, r25	; 0x0c
    2202:	8b 87       	std	Y+11, r24	; 0x0b
    2204:	6f e1       	ldi	r22, 0x1F	; 31
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	a1 2c       	mov	r10, r1
    220a:	b1 2c       	mov	r11, r1
    220c:	c1 2c       	mov	r12, r1
    220e:	a0 e4       	ldi	r26, 0x40	; 64
    2210:	da 2e       	mov	r13, r26
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	dc 01       	movw	r26, r24
    2218:	2e 15       	cp	r18, r14
    221a:	3f 05       	cpc	r19, r15
    221c:	40 07       	cpc	r20, r16
    221e:	51 07       	cpc	r21, r17
    2220:	40 f0       	brcs	.+16     	; 0x2232 <__divsf3+0xea>
    2222:	8a 29       	or	r24, r10
    2224:	9b 29       	or	r25, r11
    2226:	ac 29       	or	r26, r12
    2228:	bd 29       	or	r27, r13
    222a:	2e 19       	sub	r18, r14
    222c:	3f 09       	sbc	r19, r15
    222e:	40 0b       	sbc	r20, r16
    2230:	51 0b       	sbc	r21, r17
    2232:	d6 94       	lsr	r13
    2234:	c7 94       	ror	r12
    2236:	b7 94       	ror	r11
    2238:	a7 94       	ror	r10
    223a:	22 0f       	add	r18, r18
    223c:	33 1f       	adc	r19, r19
    223e:	44 1f       	adc	r20, r20
    2240:	55 1f       	adc	r21, r21
    2242:	61 50       	subi	r22, 0x01	; 1
    2244:	70 40       	sbci	r23, 0x00	; 0
    2246:	41 f7       	brne	.-48     	; 0x2218 <__divsf3+0xd0>
    2248:	6f e7       	ldi	r22, 0x7F	; 127
    224a:	e6 2e       	mov	r14, r22
    224c:	f1 2c       	mov	r15, r1
    224e:	01 2d       	mov	r16, r1
    2250:	11 2d       	mov	r17, r1
    2252:	e8 22       	and	r14, r24
    2254:	f9 22       	and	r15, r25
    2256:	0a 23       	and	r16, r26
    2258:	1b 23       	and	r17, r27
    225a:	60 e4       	ldi	r22, 0x40	; 64
    225c:	e6 16       	cp	r14, r22
    225e:	f1 04       	cpc	r15, r1
    2260:	01 05       	cpc	r16, r1
    2262:	11 05       	cpc	r17, r1
    2264:	61 f4       	brne	.+24     	; 0x227e <__divsf3+0x136>
    2266:	87 fd       	sbrc	r24, 7
    2268:	0a c0       	rjmp	.+20     	; 0x227e <__divsf3+0x136>
    226a:	21 15       	cp	r18, r1
    226c:	31 05       	cpc	r19, r1
    226e:	41 05       	cpc	r20, r1
    2270:	51 05       	cpc	r21, r1
    2272:	29 f0       	breq	.+10     	; 0x227e <__divsf3+0x136>
    2274:	80 5c       	subi	r24, 0xC0	; 192
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	af 4f       	sbci	r26, 0xFF	; 255
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	80 78       	andi	r24, 0x80	; 128
    227e:	8d 87       	std	Y+13, r24	; 0x0d
    2280:	9e 87       	std	Y+14, r25	; 0x0e
    2282:	af 87       	std	Y+15, r26	; 0x0f
    2284:	b8 8b       	std	Y+16, r27	; 0x10
    2286:	8e 01       	movw	r16, r28
    2288:	07 5f       	subi	r16, 0xF7	; 247
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <__divsf3+0x14e>
    228e:	87 01       	movw	r16, r14
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <__divsf3+0x14e>
    2292:	02 e1       	ldi	r16, 0x12	; 18
    2294:	11 e0       	ldi	r17, 0x01	; 1
    2296:	c8 01       	movw	r24, r16
    2298:	0e 94 34 12 	call	0x2468	; 0x2468 <__pack_f>
    229c:	68 96       	adiw	r28, 0x18	; 24
    229e:	ea e0       	ldi	r30, 0x0A	; 10
    22a0:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x10>

000022a4 <__gtsf2>:
    22a4:	a8 e1       	ldi	r26, 0x18	; 24
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e5       	ldi	r30, 0x58	; 88
    22aa:	f1 e1       	ldi	r31, 0x11	; 17
    22ac:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x18>
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	2d 83       	std	Y+5, r18	; 0x05
    22ba:	3e 83       	std	Y+6, r19	; 0x06
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	8e 01       	movw	r16, r28
    22c2:	07 5f       	subi	r16, 0xF7	; 247
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	ce 01       	movw	r24, r28
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	b8 01       	movw	r22, r16
    22cc:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    22d0:	81 e1       	ldi	r24, 0x11	; 17
    22d2:	e8 2e       	mov	r14, r24
    22d4:	f1 2c       	mov	r15, r1
    22d6:	ec 0e       	add	r14, r28
    22d8:	fd 1e       	adc	r15, r29
    22da:	ce 01       	movw	r24, r28
    22dc:	05 96       	adiw	r24, 0x05	; 5
    22de:	b7 01       	movw	r22, r14
    22e0:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	40 f0       	brcs	.+16     	; 0x22fa <__gtsf2+0x56>
    22ea:	89 89       	ldd	r24, Y+17	; 0x11
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	28 f0       	brcs	.+10     	; 0x22fa <__gtsf2+0x56>
    22f0:	c8 01       	movw	r24, r16
    22f2:	b7 01       	movw	r22, r14
    22f4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fpcmp_parts_f>
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <__gtsf2+0x58>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	68 96       	adiw	r28, 0x18	; 24
    22fe:	e6 e0       	ldi	r30, 0x06	; 6
    2300:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

00002304 <__gesf2>:
    2304:	a8 e1       	ldi	r26, 0x18	; 24
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e8       	ldi	r30, 0x88	; 136
    230a:	f1 e1       	ldi	r31, 0x11	; 17
    230c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x18>
    2310:	69 83       	std	Y+1, r22	; 0x01
    2312:	7a 83       	std	Y+2, r23	; 0x02
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	2d 83       	std	Y+5, r18	; 0x05
    231a:	3e 83       	std	Y+6, r19	; 0x06
    231c:	4f 83       	std	Y+7, r20	; 0x07
    231e:	58 87       	std	Y+8, r21	; 0x08
    2320:	8e 01       	movw	r16, r28
    2322:	07 5f       	subi	r16, 0xF7	; 247
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	b8 01       	movw	r22, r16
    232c:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    2330:	81 e1       	ldi	r24, 0x11	; 17
    2332:	e8 2e       	mov	r14, r24
    2334:	f1 2c       	mov	r15, r1
    2336:	ec 0e       	add	r14, r28
    2338:	fd 1e       	adc	r15, r29
    233a:	ce 01       	movw	r24, r28
    233c:	05 96       	adiw	r24, 0x05	; 5
    233e:	b7 01       	movw	r22, r14
    2340:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	40 f0       	brcs	.+16     	; 0x235a <__gesf2+0x56>
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	28 f0       	brcs	.+10     	; 0x235a <__gesf2+0x56>
    2350:	c8 01       	movw	r24, r16
    2352:	b7 01       	movw	r22, r14
    2354:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fpcmp_parts_f>
    2358:	01 c0       	rjmp	.+2      	; 0x235c <__gesf2+0x58>
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	68 96       	adiw	r28, 0x18	; 24
    235e:	e6 e0       	ldi	r30, 0x06	; 6
    2360:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

00002364 <__ltsf2>:
    2364:	a8 e1       	ldi	r26, 0x18	; 24
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e8 eb       	ldi	r30, 0xB8	; 184
    236a:	f1 e1       	ldi	r31, 0x11	; 17
    236c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x18>
    2370:	69 83       	std	Y+1, r22	; 0x01
    2372:	7a 83       	std	Y+2, r23	; 0x02
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	2d 83       	std	Y+5, r18	; 0x05
    237a:	3e 83       	std	Y+6, r19	; 0x06
    237c:	4f 83       	std	Y+7, r20	; 0x07
    237e:	58 87       	std	Y+8, r21	; 0x08
    2380:	8e 01       	movw	r16, r28
    2382:	07 5f       	subi	r16, 0xF7	; 247
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	b8 01       	movw	r22, r16
    238c:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    2390:	81 e1       	ldi	r24, 0x11	; 17
    2392:	e8 2e       	mov	r14, r24
    2394:	f1 2c       	mov	r15, r1
    2396:	ec 0e       	add	r14, r28
    2398:	fd 1e       	adc	r15, r29
    239a:	ce 01       	movw	r24, r28
    239c:	05 96       	adiw	r24, 0x05	; 5
    239e:	b7 01       	movw	r22, r14
    23a0:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	40 f0       	brcs	.+16     	; 0x23ba <__ltsf2+0x56>
    23aa:	89 89       	ldd	r24, Y+17	; 0x11
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	28 f0       	brcs	.+10     	; 0x23ba <__ltsf2+0x56>
    23b0:	c8 01       	movw	r24, r16
    23b2:	b7 01       	movw	r22, r14
    23b4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fpcmp_parts_f>
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <__ltsf2+0x58>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	68 96       	adiw	r28, 0x18	; 24
    23be:	e6 e0       	ldi	r30, 0x06	; 6
    23c0:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

000023c4 <__fixsfsi>:
    23c4:	ac e0       	ldi	r26, 0x0C	; 12
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ca:	f1 e1       	ldi	r31, 0x11	; 17
    23cc:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__+0x20>
    23d0:	69 83       	std	Y+1, r22	; 0x01
    23d2:	7a 83       	std	Y+2, r23	; 0x02
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	be 01       	movw	r22, r28
    23de:	6b 5f       	subi	r22, 0xFB	; 251
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	0e 94 02 13 	call	0x2604	; 0x2604 <__unpack_f>
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	81 f1       	breq	.+96     	; 0x244c <__fixsfsi+0x88>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	70 f1       	brcs	.+92     	; 0x244c <__fixsfsi+0x88>
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	21 f4       	brne	.+8      	; 0x23fc <__fixsfsi+0x38>
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
    23f6:	88 23       	and	r24, r24
    23f8:	69 f1       	breq	.+90     	; 0x2454 <__fixsfsi+0x90>
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <__fixsfsi+0x4c>
    23fc:	2f 81       	ldd	r18, Y+7	; 0x07
    23fe:	38 85       	ldd	r19, Y+8	; 0x08
    2400:	37 fd       	sbrc	r19, 7
    2402:	24 c0       	rjmp	.+72     	; 0x244c <__fixsfsi+0x88>
    2404:	6e 81       	ldd	r22, Y+6	; 0x06
    2406:	2f 31       	cpi	r18, 0x1F	; 31
    2408:	31 05       	cpc	r19, r1
    240a:	3c f0       	brlt	.+14     	; 0x241a <__fixsfsi+0x56>
    240c:	66 23       	and	r22, r22
    240e:	11 f1       	breq	.+68     	; 0x2454 <__fixsfsi+0x90>
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e8       	ldi	r21, 0x80	; 128
    2418:	21 c0       	rjmp	.+66     	; 0x245c <__fixsfsi+0x98>
    241a:	8e e1       	ldi	r24, 0x1E	; 30
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	82 1b       	sub	r24, r18
    2420:	93 0b       	sbc	r25, r19
    2422:	29 85       	ldd	r18, Y+9	; 0x09
    2424:	3a 85       	ldd	r19, Y+10	; 0x0a
    2426:	4b 85       	ldd	r20, Y+11	; 0x0b
    2428:	5c 85       	ldd	r21, Y+12	; 0x0c
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <__fixsfsi+0x70>
    242c:	56 95       	lsr	r21
    242e:	47 95       	ror	r20
    2430:	37 95       	ror	r19
    2432:	27 95       	ror	r18
    2434:	8a 95       	dec	r24
    2436:	d2 f7       	brpl	.-12     	; 0x242c <__fixsfsi+0x68>
    2438:	66 23       	and	r22, r22
    243a:	81 f0       	breq	.+32     	; 0x245c <__fixsfsi+0x98>
    243c:	50 95       	com	r21
    243e:	40 95       	com	r20
    2440:	30 95       	com	r19
    2442:	21 95       	neg	r18
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	4f 4f       	sbci	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	08 c0       	rjmp	.+16     	; 0x245c <__fixsfsi+0x98>
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	a9 01       	movw	r20, r18
    2452:	04 c0       	rjmp	.+8      	; 0x245c <__fixsfsi+0x98>
    2454:	2f ef       	ldi	r18, 0xFF	; 255
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f ef       	ldi	r20, 0xFF	; 255
    245a:	5f e7       	ldi	r21, 0x7F	; 127
    245c:	b9 01       	movw	r22, r18
    245e:	ca 01       	movw	r24, r20
    2460:	2c 96       	adiw	r28, 0x0c	; 12
    2462:	e2 e0       	ldi	r30, 0x02	; 2
    2464:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__+0x20>

00002468 <__pack_f>:
    2468:	ef 92       	push	r14
    246a:	ff 92       	push	r15
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	fc 01       	movw	r30, r24
    2476:	24 81       	ldd	r18, Z+4	; 0x04
    2478:	35 81       	ldd	r19, Z+5	; 0x05
    247a:	46 81       	ldd	r20, Z+6	; 0x06
    247c:	57 81       	ldd	r21, Z+7	; 0x07
    247e:	61 81       	ldd	r22, Z+1	; 0x01
    2480:	80 81       	ld	r24, Z
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	20 f4       	brcc	.+8      	; 0x248e <__pack_f+0x26>
    2486:	40 61       	ori	r20, 0x10	; 16
    2488:	ef ef       	ldi	r30, 0xFF	; 255
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	a3 c0       	rjmp	.+326    	; 0x25d4 <__pack_f+0x16c>
    248e:	84 30       	cpi	r24, 0x04	; 4
    2490:	09 f4       	brne	.+2      	; 0x2494 <__pack_f+0x2c>
    2492:	9b c0       	rjmp	.+310    	; 0x25ca <__pack_f+0x162>
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	09 f4       	brne	.+2      	; 0x249a <__pack_f+0x32>
    2498:	92 c0       	rjmp	.+292    	; 0x25be <__pack_f+0x156>
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	41 05       	cpc	r20, r1
    24a0:	51 05       	cpc	r21, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__pack_f+0x3e>
    24a4:	8f c0       	rjmp	.+286    	; 0x25c4 <__pack_f+0x15c>
    24a6:	02 80       	ldd	r0, Z+2	; 0x02
    24a8:	f3 81       	ldd	r31, Z+3	; 0x03
    24aa:	e0 2d       	mov	r30, r0
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	e2 38       	cpi	r30, 0x82	; 130
    24b0:	f8 07       	cpc	r31, r24
    24b2:	0c f0       	brlt	.+2      	; 0x24b6 <__pack_f+0x4e>
    24b4:	5a c0       	rjmp	.+180    	; 0x256a <__pack_f+0x102>
    24b6:	c2 e8       	ldi	r28, 0x82	; 130
    24b8:	df ef       	ldi	r29, 0xFF	; 255
    24ba:	ce 1b       	sub	r28, r30
    24bc:	df 0b       	sbc	r29, r31
    24be:	ca 31       	cpi	r28, 0x1A	; 26
    24c0:	d1 05       	cpc	r29, r1
    24c2:	6c f5       	brge	.+90     	; 0x251e <__pack_f+0xb6>
    24c4:	79 01       	movw	r14, r18
    24c6:	8a 01       	movw	r16, r20
    24c8:	0c 2e       	mov	r0, r28
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <__pack_f+0x6c>
    24cc:	16 95       	lsr	r17
    24ce:	07 95       	ror	r16
    24d0:	f7 94       	ror	r15
    24d2:	e7 94       	ror	r14
    24d4:	0a 94       	dec	r0
    24d6:	d2 f7       	brpl	.-12     	; 0x24cc <__pack_f+0x64>
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e0       	ldi	r26, 0x00	; 0
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	0c 2e       	mov	r0, r28
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <__pack_f+0x84>
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	aa 1f       	adc	r26, r26
    24ea:	bb 1f       	adc	r27, r27
    24ec:	0a 94       	dec	r0
    24ee:	d2 f7       	brpl	.-12     	; 0x24e4 <__pack_f+0x7c>
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	a1 09       	sbc	r26, r1
    24f4:	b1 09       	sbc	r27, r1
    24f6:	82 23       	and	r24, r18
    24f8:	93 23       	and	r25, r19
    24fa:	a4 23       	and	r26, r20
    24fc:	b5 23       	and	r27, r21
    24fe:	21 e0       	ldi	r18, 0x01	; 1
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	a1 05       	cpc	r26, r1
    250a:	b1 05       	cpc	r27, r1
    250c:	19 f4       	brne	.+6      	; 0x2514 <__pack_f+0xac>
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	a9 01       	movw	r20, r18
    2514:	2e 29       	or	r18, r14
    2516:	3f 29       	or	r19, r15
    2518:	40 2b       	or	r20, r16
    251a:	51 2b       	or	r21, r17
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <__pack_f+0xbc>
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	a9 01       	movw	r20, r18
    2524:	da 01       	movw	r26, r20
    2526:	c9 01       	movw	r24, r18
    2528:	8f 77       	andi	r24, 0x7F	; 127
    252a:	90 70       	andi	r25, 0x00	; 0
    252c:	a0 70       	andi	r26, 0x00	; 0
    252e:	b0 70       	andi	r27, 0x00	; 0
    2530:	80 34       	cpi	r24, 0x40	; 64
    2532:	91 05       	cpc	r25, r1
    2534:	a1 05       	cpc	r26, r1
    2536:	b1 05       	cpc	r27, r1
    2538:	39 f4       	brne	.+14     	; 0x2548 <__pack_f+0xe0>
    253a:	27 ff       	sbrs	r18, 7
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <__pack_f+0xe8>
    253e:	20 5c       	subi	r18, 0xC0	; 192
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	4f 4f       	sbci	r20, 0xFF	; 255
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__pack_f+0xe8>
    2548:	21 5c       	subi	r18, 0xC1	; 193
    254a:	3f 4f       	sbci	r19, 0xFF	; 255
    254c:	4f 4f       	sbci	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	e1 e0       	ldi	r30, 0x01	; 1
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	20 30       	cpi	r18, 0x00	; 0
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	38 07       	cpc	r19, r24
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	48 07       	cpc	r20, r24
    255e:	80 e4       	ldi	r24, 0x40	; 64
    2560:	58 07       	cpc	r21, r24
    2562:	28 f5       	brcc	.+74     	; 0x25ae <__pack_f+0x146>
    2564:	e0 e0       	ldi	r30, 0x00	; 0
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	22 c0       	rjmp	.+68     	; 0x25ae <__pack_f+0x146>
    256a:	e0 38       	cpi	r30, 0x80	; 128
    256c:	f1 05       	cpc	r31, r1
    256e:	6c f5       	brge	.+90     	; 0x25ca <__pack_f+0x162>
    2570:	e1 58       	subi	r30, 0x81	; 129
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	da 01       	movw	r26, r20
    2576:	c9 01       	movw	r24, r18
    2578:	8f 77       	andi	r24, 0x7F	; 127
    257a:	90 70       	andi	r25, 0x00	; 0
    257c:	a0 70       	andi	r26, 0x00	; 0
    257e:	b0 70       	andi	r27, 0x00	; 0
    2580:	80 34       	cpi	r24, 0x40	; 64
    2582:	91 05       	cpc	r25, r1
    2584:	a1 05       	cpc	r26, r1
    2586:	b1 05       	cpc	r27, r1
    2588:	39 f4       	brne	.+14     	; 0x2598 <__pack_f+0x130>
    258a:	27 ff       	sbrs	r18, 7
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <__pack_f+0x138>
    258e:	20 5c       	subi	r18, 0xC0	; 192
    2590:	3f 4f       	sbci	r19, 0xFF	; 255
    2592:	4f 4f       	sbci	r20, 0xFF	; 255
    2594:	5f 4f       	sbci	r21, 0xFF	; 255
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__pack_f+0x138>
    2598:	21 5c       	subi	r18, 0xC1	; 193
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	4f 4f       	sbci	r20, 0xFF	; 255
    259e:	5f 4f       	sbci	r21, 0xFF	; 255
    25a0:	57 ff       	sbrs	r21, 7
    25a2:	05 c0       	rjmp	.+10     	; 0x25ae <__pack_f+0x146>
    25a4:	56 95       	lsr	r21
    25a6:	47 95       	ror	r20
    25a8:	37 95       	ror	r19
    25aa:	27 95       	ror	r18
    25ac:	31 96       	adiw	r30, 0x01	; 1
    25ae:	87 e0       	ldi	r24, 0x07	; 7
    25b0:	56 95       	lsr	r21
    25b2:	47 95       	ror	r20
    25b4:	37 95       	ror	r19
    25b6:	27 95       	ror	r18
    25b8:	8a 95       	dec	r24
    25ba:	d1 f7       	brne	.-12     	; 0x25b0 <__pack_f+0x148>
    25bc:	0b c0       	rjmp	.+22     	; 0x25d4 <__pack_f+0x16c>
    25be:	e0 e0       	ldi	r30, 0x00	; 0
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	05 c0       	rjmp	.+10     	; 0x25ce <__pack_f+0x166>
    25c4:	e0 e0       	ldi	r30, 0x00	; 0
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <__pack_f+0x16c>
    25ca:	ef ef       	ldi	r30, 0xFF	; 255
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	a9 01       	movw	r20, r18
    25d4:	8e 2f       	mov	r24, r30
    25d6:	87 95       	ror	r24
    25d8:	88 27       	eor	r24, r24
    25da:	87 95       	ror	r24
    25dc:	94 2f       	mov	r25, r20
    25de:	9f 77       	andi	r25, 0x7F	; 127
    25e0:	67 95       	ror	r22
    25e2:	66 27       	eor	r22, r22
    25e4:	67 95       	ror	r22
    25e6:	e6 95       	lsr	r30
    25e8:	e2 2e       	mov	r14, r18
    25ea:	a9 2f       	mov	r26, r25
    25ec:	a8 2b       	or	r26, r24
    25ee:	fe 2f       	mov	r31, r30
    25f0:	f6 2b       	or	r31, r22
    25f2:	62 2f       	mov	r22, r18
    25f4:	73 2f       	mov	r23, r19
    25f6:	8a 2f       	mov	r24, r26
    25f8:	9f 2f       	mov	r25, r31
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	e6 e0       	ldi	r30, 0x06	; 6
    2600:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x18>

00002604 <__unpack_f>:
    2604:	dc 01       	movw	r26, r24
    2606:	fb 01       	movw	r30, r22
    2608:	2c 91       	ld	r18, X
    260a:	11 96       	adiw	r26, 0x01	; 1
    260c:	3c 91       	ld	r19, X
    260e:	11 97       	sbiw	r26, 0x01	; 1
    2610:	12 96       	adiw	r26, 0x02	; 2
    2612:	8c 91       	ld	r24, X
    2614:	12 97       	sbiw	r26, 0x02	; 2
    2616:	48 2f       	mov	r20, r24
    2618:	4f 77       	andi	r20, 0x7F	; 127
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	98 2f       	mov	r25, r24
    261e:	99 1f       	adc	r25, r25
    2620:	99 27       	eor	r25, r25
    2622:	99 1f       	adc	r25, r25
    2624:	13 96       	adiw	r26, 0x03	; 3
    2626:	6c 91       	ld	r22, X
    2628:	13 97       	sbiw	r26, 0x03	; 3
    262a:	86 2f       	mov	r24, r22
    262c:	88 0f       	add	r24, r24
    262e:	89 2b       	or	r24, r25
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	66 1f       	adc	r22, r22
    2634:	66 27       	eor	r22, r22
    2636:	66 1f       	adc	r22, r22
    2638:	61 83       	std	Z+1, r22	; 0x01
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	39 f5       	brne	.+78     	; 0x268c <__unpack_f+0x88>
    263e:	21 15       	cp	r18, r1
    2640:	31 05       	cpc	r19, r1
    2642:	41 05       	cpc	r20, r1
    2644:	51 05       	cpc	r21, r1
    2646:	11 f4       	brne	.+4      	; 0x264c <__unpack_f+0x48>
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	29 c0       	rjmp	.+82     	; 0x269e <__unpack_f+0x9a>
    264c:	82 e8       	ldi	r24, 0x82	; 130
    264e:	9f ef       	ldi	r25, 0xFF	; 255
    2650:	93 83       	std	Z+3, r25	; 0x03
    2652:	82 83       	std	Z+2, r24	; 0x02
    2654:	67 e0       	ldi	r22, 0x07	; 7
    2656:	22 0f       	add	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	44 1f       	adc	r20, r20
    265c:	55 1f       	adc	r21, r21
    265e:	6a 95       	dec	r22
    2660:	d1 f7       	brne	.-12     	; 0x2656 <__unpack_f+0x52>
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	80 83       	st	Z, r24
    2666:	09 c0       	rjmp	.+18     	; 0x267a <__unpack_f+0x76>
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	44 1f       	adc	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	93 83       	std	Z+3, r25	; 0x03
    2678:	82 83       	std	Z+2, r24	; 0x02
    267a:	20 30       	cpi	r18, 0x00	; 0
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	38 07       	cpc	r19, r24
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	48 07       	cpc	r20, r24
    2684:	80 e4       	ldi	r24, 0x40	; 64
    2686:	58 07       	cpc	r21, r24
    2688:	78 f3       	brcs	.-34     	; 0x2668 <__unpack_f+0x64>
    268a:	20 c0       	rjmp	.+64     	; 0x26cc <__unpack_f+0xc8>
    268c:	8f 3f       	cpi	r24, 0xFF	; 255
    268e:	91 05       	cpc	r25, r1
    2690:	79 f4       	brne	.+30     	; 0x26b0 <__unpack_f+0xac>
    2692:	21 15       	cp	r18, r1
    2694:	31 05       	cpc	r19, r1
    2696:	41 05       	cpc	r20, r1
    2698:	51 05       	cpc	r21, r1
    269a:	19 f4       	brne	.+6      	; 0x26a2 <__unpack_f+0x9e>
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	80 83       	st	Z, r24
    26a0:	08 95       	ret
    26a2:	44 ff       	sbrs	r20, 4
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <__unpack_f+0xa8>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 83       	st	Z, r24
    26aa:	10 c0       	rjmp	.+32     	; 0x26cc <__unpack_f+0xc8>
    26ac:	10 82       	st	Z, r1
    26ae:	0e c0       	rjmp	.+28     	; 0x26cc <__unpack_f+0xc8>
    26b0:	8f 57       	subi	r24, 0x7F	; 127
    26b2:	90 40       	sbci	r25, 0x00	; 0
    26b4:	93 83       	std	Z+3, r25	; 0x03
    26b6:	82 83       	std	Z+2, r24	; 0x02
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	80 83       	st	Z, r24
    26bc:	87 e0       	ldi	r24, 0x07	; 7
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	44 1f       	adc	r20, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	8a 95       	dec	r24
    26c8:	d1 f7       	brne	.-12     	; 0x26be <__unpack_f+0xba>
    26ca:	50 64       	ori	r21, 0x40	; 64
    26cc:	24 83       	std	Z+4, r18	; 0x04
    26ce:	35 83       	std	Z+5, r19	; 0x05
    26d0:	46 83       	std	Z+6, r20	; 0x06
    26d2:	57 83       	std	Z+7, r21	; 0x07
    26d4:	08 95       	ret

000026d6 <__fpcmp_parts_f>:
    26d6:	fc 01       	movw	r30, r24
    26d8:	db 01       	movw	r26, r22
    26da:	90 81       	ld	r25, Z
    26dc:	92 30       	cpi	r25, 0x02	; 2
    26de:	08 f4       	brcc	.+2      	; 0x26e2 <__fpcmp_parts_f+0xc>
    26e0:	49 c0       	rjmp	.+146    	; 0x2774 <__fpcmp_parts_f+0x9e>
    26e2:	8c 91       	ld	r24, X
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	08 f4       	brcc	.+2      	; 0x26ea <__fpcmp_parts_f+0x14>
    26e8:	45 c0       	rjmp	.+138    	; 0x2774 <__fpcmp_parts_f+0x9e>
    26ea:	94 30       	cpi	r25, 0x04	; 4
    26ec:	51 f4       	brne	.+20     	; 0x2702 <__fpcmp_parts_f+0x2c>
    26ee:	61 81       	ldd	r22, Z+1	; 0x01
    26f0:	84 30       	cpi	r24, 0x04	; 4
    26f2:	b1 f5       	brne	.+108    	; 0x2760 <__fpcmp_parts_f+0x8a>
    26f4:	11 96       	adiw	r26, 0x01	; 1
    26f6:	2c 91       	ld	r18, X
    26f8:	11 97       	sbiw	r26, 0x01	; 1
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	26 1b       	sub	r18, r22
    26fe:	31 09       	sbc	r19, r1
    2700:	41 c0       	rjmp	.+130    	; 0x2784 <__fpcmp_parts_f+0xae>
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	21 f0       	breq	.+8      	; 0x270e <__fpcmp_parts_f+0x38>
    2706:	92 30       	cpi	r25, 0x02	; 2
    2708:	41 f4       	brne	.+16     	; 0x271a <__fpcmp_parts_f+0x44>
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	b1 f1       	breq	.+108    	; 0x277a <__fpcmp_parts_f+0xa4>
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	8c 91       	ld	r24, X
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	88 23       	and	r24, r24
    2716:	a1 f1       	breq	.+104    	; 0x2780 <__fpcmp_parts_f+0xaa>
    2718:	2d c0       	rjmp	.+90     	; 0x2774 <__fpcmp_parts_f+0x9e>
    271a:	61 81       	ldd	r22, Z+1	; 0x01
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	01 f1       	breq	.+64     	; 0x2760 <__fpcmp_parts_f+0x8a>
    2720:	11 96       	adiw	r26, 0x01	; 1
    2722:	8c 91       	ld	r24, X
    2724:	11 97       	sbiw	r26, 0x01	; 1
    2726:	68 17       	cp	r22, r24
    2728:	d9 f4       	brne	.+54     	; 0x2760 <__fpcmp_parts_f+0x8a>
    272a:	22 81       	ldd	r18, Z+2	; 0x02
    272c:	33 81       	ldd	r19, Z+3	; 0x03
    272e:	12 96       	adiw	r26, 0x02	; 2
    2730:	8d 91       	ld	r24, X+
    2732:	9c 91       	ld	r25, X
    2734:	13 97       	sbiw	r26, 0x03	; 3
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	94 f0       	brlt	.+36     	; 0x2760 <__fpcmp_parts_f+0x8a>
    273c:	28 17       	cp	r18, r24
    273e:	39 07       	cpc	r19, r25
    2740:	bc f0       	brlt	.+46     	; 0x2770 <__fpcmp_parts_f+0x9a>
    2742:	24 81       	ldd	r18, Z+4	; 0x04
    2744:	35 81       	ldd	r19, Z+5	; 0x05
    2746:	46 81       	ldd	r20, Z+6	; 0x06
    2748:	57 81       	ldd	r21, Z+7	; 0x07
    274a:	14 96       	adiw	r26, 0x04	; 4
    274c:	8d 91       	ld	r24, X+
    274e:	9d 91       	ld	r25, X+
    2750:	0d 90       	ld	r0, X+
    2752:	bc 91       	ld	r27, X
    2754:	a0 2d       	mov	r26, r0
    2756:	82 17       	cp	r24, r18
    2758:	93 07       	cpc	r25, r19
    275a:	a4 07       	cpc	r26, r20
    275c:	b5 07       	cpc	r27, r21
    275e:	18 f4       	brcc	.+6      	; 0x2766 <__fpcmp_parts_f+0x90>
    2760:	66 23       	and	r22, r22
    2762:	41 f0       	breq	.+16     	; 0x2774 <__fpcmp_parts_f+0x9e>
    2764:	0d c0       	rjmp	.+26     	; 0x2780 <__fpcmp_parts_f+0xaa>
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	4a 07       	cpc	r20, r26
    276c:	5b 07       	cpc	r21, r27
    276e:	28 f4       	brcc	.+10     	; 0x277a <__fpcmp_parts_f+0xa4>
    2770:	66 23       	and	r22, r22
    2772:	31 f0       	breq	.+12     	; 0x2780 <__fpcmp_parts_f+0xaa>
    2774:	21 e0       	ldi	r18, 0x01	; 1
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <__fpcmp_parts_f+0xae>
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <__fpcmp_parts_f+0xae>
    2780:	2f ef       	ldi	r18, 0xFF	; 255
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	c9 01       	movw	r24, r18
    2786:	08 95       	ret

00002788 <__divmodhi4>:
    2788:	97 fb       	bst	r25, 7
    278a:	09 2e       	mov	r0, r25
    278c:	07 26       	eor	r0, r23
    278e:	0a d0       	rcall	.+20     	; 0x27a4 <__divmodhi4_neg1>
    2790:	77 fd       	sbrc	r23, 7
    2792:	04 d0       	rcall	.+8      	; 0x279c <__divmodhi4_neg2>
    2794:	0c d0       	rcall	.+24     	; 0x27ae <__udivmodhi4>
    2796:	06 d0       	rcall	.+12     	; 0x27a4 <__divmodhi4_neg1>
    2798:	00 20       	and	r0, r0
    279a:	1a f4       	brpl	.+6      	; 0x27a2 <__divmodhi4_exit>

0000279c <__divmodhi4_neg2>:
    279c:	70 95       	com	r23
    279e:	61 95       	neg	r22
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255

000027a2 <__divmodhi4_exit>:
    27a2:	08 95       	ret

000027a4 <__divmodhi4_neg1>:
    27a4:	f6 f7       	brtc	.-4      	; 0x27a2 <__divmodhi4_exit>
    27a6:	90 95       	com	r25
    27a8:	81 95       	neg	r24
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	08 95       	ret

000027ae <__udivmodhi4>:
    27ae:	aa 1b       	sub	r26, r26
    27b0:	bb 1b       	sub	r27, r27
    27b2:	51 e1       	ldi	r21, 0x11	; 17
    27b4:	07 c0       	rjmp	.+14     	; 0x27c4 <__udivmodhi4_ep>

000027b6 <__udivmodhi4_loop>:
    27b6:	aa 1f       	adc	r26, r26
    27b8:	bb 1f       	adc	r27, r27
    27ba:	a6 17       	cp	r26, r22
    27bc:	b7 07       	cpc	r27, r23
    27be:	10 f0       	brcs	.+4      	; 0x27c4 <__udivmodhi4_ep>
    27c0:	a6 1b       	sub	r26, r22
    27c2:	b7 0b       	sbc	r27, r23

000027c4 <__udivmodhi4_ep>:
    27c4:	88 1f       	adc	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	5a 95       	dec	r21
    27ca:	a9 f7       	brne	.-22     	; 0x27b6 <__udivmodhi4_loop>
    27cc:	80 95       	com	r24
    27ce:	90 95       	com	r25
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	08 95       	ret

000027d6 <__prologue_saves__>:
    27d6:	2f 92       	push	r2
    27d8:	3f 92       	push	r3
    27da:	4f 92       	push	r4
    27dc:	5f 92       	push	r5
    27de:	6f 92       	push	r6
    27e0:	7f 92       	push	r7
    27e2:	8f 92       	push	r8
    27e4:	9f 92       	push	r9
    27e6:	af 92       	push	r10
    27e8:	bf 92       	push	r11
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	ca 1b       	sub	r28, r26
    2800:	db 0b       	sbc	r29, r27
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	09 94       	ijmp

0000280e <__epilogue_restores__>:
    280e:	2a 88       	ldd	r2, Y+18	; 0x12
    2810:	39 88       	ldd	r3, Y+17	; 0x11
    2812:	48 88       	ldd	r4, Y+16	; 0x10
    2814:	5f 84       	ldd	r5, Y+15	; 0x0f
    2816:	6e 84       	ldd	r6, Y+14	; 0x0e
    2818:	7d 84       	ldd	r7, Y+13	; 0x0d
    281a:	8c 84       	ldd	r8, Y+12	; 0x0c
    281c:	9b 84       	ldd	r9, Y+11	; 0x0b
    281e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2820:	b9 84       	ldd	r11, Y+9	; 0x09
    2822:	c8 84       	ldd	r12, Y+8	; 0x08
    2824:	df 80       	ldd	r13, Y+7	; 0x07
    2826:	ee 80       	ldd	r14, Y+6	; 0x06
    2828:	fd 80       	ldd	r15, Y+5	; 0x05
    282a:	0c 81       	ldd	r16, Y+4	; 0x04
    282c:	1b 81       	ldd	r17, Y+3	; 0x03
    282e:	aa 81       	ldd	r26, Y+2	; 0x02
    2830:	b9 81       	ldd	r27, Y+1	; 0x01
    2832:	ce 0f       	add	r28, r30
    2834:	d1 1d       	adc	r29, r1
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	ed 01       	movw	r28, r26
    2842:	08 95       	ret

00002844 <_exit>:
    2844:	f8 94       	cli

00002846 <__stop_program>:
    2846:	ff cf       	rjmp	.-2      	; 0x2846 <__stop_program>
